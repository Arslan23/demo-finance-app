<!DOCTYPE html>
<html class="fontawesome-i2svg-active fontawesome-i2svg-complete" lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Database | NestJS - A progressive Node.js framework</title>
    <!-- base href="https://docs.nestjs.com/" -->
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
    <meta charset="utf-8">

    <meta name="description" content="Nest is a framework for building efficient, scalable Node.js server-side applications. It uses progressive JavaScript, is built with TypeScript and combines elements of OOP (Object Oriented Progamming), FP (Functional Programming), and FRP (Functional Reactive Programming).">
    <meta name="robots" content="noodp">
    <style type="text/css">svg:not(:root).svg-inline--fa{overflow:visible}.svg-inline--fa{display:inline-block;font-size:inherit;height:1em;overflow:visible;vertical-align:-.125em}.svg-inline--fa.fa-lg{vertical-align:-.225em}.svg-inline--fa.fa-w-1{width:.0625em}.svg-inline--fa.fa-w-2{width:.125em}.svg-inline--fa.fa-w-3{width:.1875em}.svg-inline--fa.fa-w-4{width:.25em}.svg-inline--fa.fa-w-5{width:.3125em}.svg-inline--fa.fa-w-6{width:.375em}.svg-inline--fa.fa-w-7{width:.4375em}.svg-inline--fa.fa-w-8{width:.5em}.svg-inline--fa.fa-w-9{width:.5625em}.svg-inline--fa.fa-w-10{width:.625em}.svg-inline--fa.fa-w-11{width:.6875em}.svg-inline--fa.fa-w-12{width:.75em}.svg-inline--fa.fa-w-13{width:.8125em}.svg-inline--fa.fa-w-14{width:.875em}.svg-inline--fa.fa-w-15{width:.9375em}.svg-inline--fa.fa-w-16{width:1em}.svg-inline--fa.fa-w-17{width:1.0625em}.svg-inline--fa.fa-w-18{width:1.125em}.svg-inline--fa.fa-w-19{width:1.1875em}.svg-inline--fa.fa-w-20{width:1.25em}.svg-inline--fa.fa-pull-left{margin-right:.3em;width:auto}.svg-inline--fa.fa-pull-right{margin-left:.3em;width:auto}.svg-inline--fa.fa-border{height:1.5em}.svg-inline--fa.fa-li{width:2em}.svg-inline--fa.fa-fw{width:1.25em}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter{background-color:#ff253a;border-radius:1em;color:#fff;height:1.5em;line-height:1;max-width:5em;min-width:1.5em;overflow:hidden;padding:.25em;right:0;text-overflow:ellipsis;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-bottom-right{bottom:0;right:0;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom right;transform-origin:bottom right}.fa-layers-bottom-left{bottom:0;left:0;right:auto;top:auto;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:bottom left;transform-origin:bottom left}.fa-layers-top-right{right:0;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-top-left{left:0;right:auto;top:0;-webkit-transform:scale(.25);transform:scale(.25);-webkit-transform-origin:top left;transform-origin:top left}.fa-lg{font-size:1.33333em;line-height:.75em;vertical-align:-.0667em}.fa-xs{font-size:.75em}.fa-sm{font-size:.875em}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:2.5em;padding-left:0}.fa-ul>li{position:relative}.fa-li{left:-2em;position:absolute;text-align:center;width:2em;line-height:inherit}.fa-border{border:solid .08em #eee;border-radius:.1em;padding:.2em .25em .15em}.fa-pull-left{float:left}.fa-pull-right{float:right}.fa.fa-pull-left,.fab.fa-pull-left,.fal.fa-pull-left,.far.fa-pull-left,.fas.fa-pull-left{margin-right:.3em}.fa.fa-pull-right,.fab.fa-pull-right,.fal.fa-pull-right,.far.fa-pull-right,.fas.fa-pull-right{margin-left:.3em}.fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear}.fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}:root .fa-flip-horizontal,:root .fa-flip-vertical,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-rotate-90{-webkit-filter:none;filter:none}.fa-stack{display:inline-block;height:2em;position:relative;width:2em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.svg-inline--fa.fa-stack-1x{height:1em;width:1em}.svg-inline--fa.fa-stack-2x{height:2em;width:2em}.fa-inverse{color:#fff}.sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.sr-only-focusable:active,.sr-only-focusable:focus{clip:auto;height:auto;margin:0;overflow:visible;position:static;width:auto}</style><link rel="canonical" href="https://docs.nestjs.com/">
    <meta property="og:url" content="https://docs.nestjs.com">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary">
    <meta property="og:site_name" content="Documentation | NestJS - A progressive Node.js framework">
    <meta property="og:title" content="Documentation | NestJS - A progressive Node.js framework">
    <meta property="og:description" content="Nest is a framework for building efficient, scalable Node.js server-side applications. It uses progressive JavaScript, is built with TypeScript and combines elements of OOP (Object Oriented Progamming), FP (Functional Programming), and FRP (Functional Reactive Programming).">
    <meta property="og:image" content="http://nestjs.com/img/nest-og.png">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="650">
    <meta name="twitter:description" content="Nest is a framework for building efficient, scalable Node.js server-side applications. It uses progressive JavaScript, is built with TypeScript and combines elements of OOP (Object Oriented Progamming), FP (Functional Programming), and FRP (Functional Reactive Programming).">
    <meta name="twitter:title" content="Documentation | NestJS - A progressive Node.js framework">

    <link rel="apple-touch-icon" sizes="180x180" href="https://docs.nestjs.com/apple-touch-icon-precomposed.png">
    <link rel="apple-touch-icon" sizes="180x180" href="https://docs.nestjs.com/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="https://docs.nestjs.com/assets/favicons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="https://docs.nestjs.com/assets/favicons/favicon-16x16.png">
    <link rel="icon" type="image/x-icon" href="https://docs.nestjs.com/favicon.ico">
    <link rel="manifest" href="https://docs.nestjs.com/assets/favicons/manifest.json">
    <link rel="msapplication-config" href="https://docs.nestjs.com/assets/favicons/browserconfig.xml">
    <link rel="mask-icon" href="https://docs.nestjs.com/assets/favicons/safari-pinned-tab.svg" color="#ed2945">
    <meta name="msapplication-TileColor" content="#ed2945">
    <meta name="theme-color" content="#ffffff">
    <style type="text/css">@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/materialicons/v109/flUhRq6tzZclQEJ-Vdg-IuiaDsNa.woff) format('woff');}.material-icons{font-family:'Material Icons';font-weight:normal;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;font-feature-settings:'liga';}@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/materialicons/v109/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2) format('woff2');}.material-icons{font-family:'Material Icons';font-weight:normal;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;-webkit-font-feature-settings:'liga';-webkit-font-smoothing:antialiased;}</style>
    <style type="text/css">@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:normal;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WR32kQ.woff) format('woff');}@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WRL2kXWdycuJDETf.woff) format('woff');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WRP2kXWdycuJDETf.woff) format('woff');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WR32kXWdycuJDA.woff) format('woff');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>
    <style type="text/css">@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7j.woff) format('woff');}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdo.woff) format('woff');}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwlxdo.woff) format('woff');}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNa7lujVj9_mf.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qPK7lujVj9_mf.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNK7lujVj9_mf.woff2) format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qO67lujVj9_mf.woff2) format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qN67lujVj9_mf.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qNq7lujVj9_mf.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:400;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xK3dSBYKcSV-LCoeQqfX1RYOo3qOK7lujVj9w.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmhdu3cOWxy40.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwkxdu3cOWxy40.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmxdu3cOWxy40.woff2) format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlBdu3cOWxy40.woff2) format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmBdu3cOWxy40.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwmRdu3cOWxy40.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:600;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu3cOWxw.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwmhdu3cOWxy40.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwkxdu3cOWxy40.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwmxdu3cOWxy40.woff2) format('woff2');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwlBdu3cOWxy40.woff2) format('woff2');unicode-range:U+0370-03FF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwmBdu3cOWxy40.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwmRdu3cOWxy40.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Source Sans Pro';font-style:normal;font-weight:700;font-display:swap;src:url(https://fonts.gstatic.com/s/sourcesanspro/v14/6xKydSBYKcSV-LCoeQqfX1RYOo3ig4vwlxdu3cOWxw.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>
    <script async="" src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/analytics.js"></script><script defer="defer" src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/all.js"></script>
    <link href="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/perfect-scrollbar.css" rel="stylesheet" media="all" onload="this.media='all'"><noscript><link rel="stylesheet" href="assets/css/perfect-scrollbar.min.css"></noscript>
    <link href="https://cdn.carbonads.com/" rel="preconnect" crossorigin="">
    <link href="https://cdn.jsdelivr.net/" rel="preconnect" crossorigin="">
    <link rel="stylesheet" href="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/docsearch.css">

    <script>
      (function(i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r;
        (i[r] =
          i[r] ||
          function() {
            (i[r].q = i[r].q || []).push(arguments);
          }),
          (i[r].l = 1 * new Date());
        (a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);
        a.async = 1;
        a.src = g;
        m.parentNode.insertBefore(a, m);
      })(
        window,
        document,
        'script',
        'https://www.google-analytics.com/analytics.js',
        'ga',
      );

      ga('create', 'UA-30617038-5', 'auto');
      ga('send', 'pageview');
    </script>
  <style>body{font-size:16px;font-weight:400;font-family:Source Sans Pro,Helvetica Neue,sans-serif;background-color:#fdfdfd;font-display:swap;color:#404040;margin:0;-webkit-font-smoothing:antialiased;}</style><link rel="stylesheet" href="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/styles.css" media="all" onload="this.media='all'"><noscript><link rel="stylesheet" href="styles.c883250c2221bc6dea1d.css"></noscript><style>.container,.transition{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix{*zoom:1}.clearfix:after,.clearfix:before{content:" ";display:table}.clearfix:after{clear:both}.center-element{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left{position:absolute;left:50%;transform:translateX(-50%)}.center-top{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing,.container{box-sizing:border-box}.container-fluid{position:relative;display:block;table-layout:fixed;width:100%;min-height:100vh}.logo-wrapper img,.logo-wrapper svg{width:42px;height:50px}.container{margin-left:250px;width:calc(100% - 250px);padding:85px 85px 0;display:inline-block;vertical-align:top;position:relative}.container.wide{margin-left:0;width:100%;display:block}@media only screen and (max-width: 1200px){.container{margin-left:250px;width:calc(100% - 250px);padding:85px 50px 0}.container.wide{width:100%}}@media only screen and (max-width : 767px){.container{margin-left:0;width:100%;padding:85px 20px 0}}@media print{.container{margin-left:0;width:100%;padding:0 20px}}.page-wrapper{color:#404040;line-height:26px}.page-wrapper a{font-weight:600;color:#ed2945}.page-wrapper a:hover{color:#0894e2}.page-wrapper h1,.page-wrapper h2,.page-wrapper h3,.page-wrapper h4,.page-wrapper h5,.page-wrapper h6{color:#151515}.page-wrapper h3{font-size:24px;font-weight:700;margin:45px 0 20px}.page-wrapper h4{font-weight:600;margin:40px 0 -5px}.page-wrapper h3 a,.page-wrapper h4 a{opacity:0;filter:alpha(opacity=0);margin-left:.1em;padding:0 .25rem}.page-wrapper h3 a:focus,.page-wrapper h3 span+a:hover,.page-wrapper h3 span:hover+a,.page-wrapper h4 a:focus,.page-wrapper h4 span+a:hover,.page-wrapper h4 span:hover+a{opacity:1;filter:alpha(opacity=100)}.page-wrapper h3:before,.page-wrapper h4:before{content:"";display:block;position:relative;width:0;height:5em;margin-top:-5em;pointer-events:none}.page-wrapper h5{color:#404040;margin-top:5px;font-weight:600;font-size:16px}.page-wrapper h3:first-of-type{margin:20px 0}.page-wrapper h3+h5{margin-top:-10px!important}.sponsors-wrapper{border-top:1px solid #e8e8e8;padding:10px 0 60px;margin-top:20px;position:relative}.sponsors-wrapper img{display:inline-block;vertical-align:middle}.sponsors-wrapper a{color:#ed2945;font-weight:600}.sponsors-wrapper a:hover{color:#0894e2}.sponsors-wrapper h3{font-size:24px;font-weight:700;color:#1d1d1d}.sponsors-wrapper h4{color:#1b2247;font-weight:600;font-size:18px;margin:30px 0 18px}.sponsors-wrapper .title{margin:50px 0 25px}.sponsors-wrapper p{margin:0;line-height:26px;font-size:16px;font-weight:500;color:#4e4e4e}.sponsors-wrapper .logo-sponsor{margin-top:10px;width:180px;filter:grayscale(1)}.sponsors-wrapper .logo-sponsor:first-of-type{margin-right:30px;margin-bottom:10px}.sponsors-wrapper .logo-sponsor:hover{filter:grayscale(0)}.sponsors-wrapper .logo-sponsor-small{width:150px;margin-bottom:30px;display:block}.sponsors-wrapper .logo-blueanchor{width:200px}.sponsors-wrapper .btn-primary{border:2px solid #ed2945;color:#ed2945;padding:12px 20px;display:inline-block}.sponsors-wrapper .btn-primary:hover{color:#0894e2;border-color:#0894e2}@media (min-width: 1200px){.sponsors-carbon{width:calc(100% - 220px)}}.backers-wrapper{margin-top:10px}.backers-wrapper img{width:30px;border-radius:50%;-webkit-border-radius:50%}.inline-column{width:50%;vertical-align:top;margin:0;float:left}@media only screen and (max-width: 991px){.inline-column{width:100%;float:none}}.companies-wrapper,.content,.toc-wrapper{display:inline-block;vertical-align:top}.companies-wrapper,.content{width:calc(100% - 220px)}@media print{.companies-wrapper,.content{width:100%}}@media only screen and (max-width: 1200px){.companies-wrapper,.content{width:100%}}.companies-wrapper .row,.content .row{display:flex}@media only screen and (max-width: 991px){.companies-wrapper .row,.content .row{display:block}}.companies-wrapper .thumbnail,.content .thumbnail{width:400px}@media only screen and (max-width: 991px){.companies-wrapper .thumbnail,.content .thumbnail{width:100%;max-width:400px;margin:0 auto}}.companies-wrapper .thumbnail img,.content .thumbnail img{max-width:100%;padding-top:10px;padding-bottom:0;box-sizing:border-box}.companies-wrapper .thumbnail.p-l-30 img,.content .thumbnail.p-l-30 img{padding-left:30px}@media only screen and (max-width: 991px){.companies-wrapper .thumbnail.p-l-30 img,.content .thumbnail.p-l-30 img{padding-left:0}}.companies-wrapper .thumbnail.p-r-30 img,.content .thumbnail.p-r-30 img{padding-right:30px}@media only screen and (max-width: 991px){.companies-wrapper .thumbnail.p-r-30 img,.content .thumbnail.p-r-30 img{padding-right:0}}.companies-wrapper .content,.content .content{flex-basis:55%}.companies-wrapper .contact-us,.content .contact-us{background:#ed2945;color:#fff;padding:20px 30px;border-radius:3px;margin:35px 0;display:flex;align-items:center}@media only screen and (max-width : 767px){.companies-wrapper .contact-us,.content .contact-us{display:block;text-align:center}.companies-wrapper .contact-us p,.content .contact-us p{text-align:center}}.companies-wrapper .contact-us h5,.content .contact-us h5{text-transform:uppercase;font-weight:600;color:#fff;margin:0}.companies-wrapper .contact-us p,.content .contact-us p{margin:0}.companies-wrapper .contact-us a,.content .contact-us a{background:#fff;border:2px solid #fff;box-sizing:border-box;padding:8px 16px;border-radius:4px;float:right;display:block;text-align:center}.companies-wrapper .contact-us a:hover,.content .contact-us a:hover{background:transparent;color:#fff}@media only screen and (max-width : 767px){.companies-wrapper .contact-us a,.content .contact-us a{width:150px;margin:15px auto 0;float:none}}.companies-wrapper .contact-us .column,.content .contact-us .column{justify-content:center;flex-direction:column}.companies-wrapper .contact-us .column-text,.content .contact-us .column-text{flex-grow:3;margin-right:20px}.github-links{float:right;margin-top:24px}.github-links svg{font-size:17px;color:#151515}.github-links svg:hover{color:#ed2945}@media only screen and (max-width: 1200px){.toc-wrapper{display:none}}.company-logo{display:inline-block;vertical-align:middle;margin:10px 20px}.company-logo img{max-width:130px;max-height:90px;filter:grayscale(100%);opacity:.5}.company-logo img:hover{filter:grayscale(0);opacity:1}.companies-list a{color:#404040;font-size:15px;font-weight:400}#carbonads a{text-decoration:none;font-weight:400}#carbonads a,#carbonads a:hover{color:inherit}#carbonads span{display:block;overflow:hidden}#carbonads_1,#carbonads_2{display:none}.carbon-img{display:block;margin:0 auto 8px;line-height:1}.carbon-text{display:block;margin-bottom:8px}.carbon-poweredby{text-transform:uppercase;display:block;font-size:10px;letter-spacing:1px;line-height:1}.carbon-wrapper #carbonads{position:fixed;z-index:11;display:block;right:65px;bottom:20px;overflow:hidden;padding:1em;background:#fdfdfd;text-align:center;line-height:1.5;font-size:13px;max-width:130px}@media only screen and (max-width: 1200px){.carbon-wrapper #carbonads{padding:30px 0 30px 30px;float:right;position:static}}@media only screen and (max-width : 767px){.carbon-wrapper #carbonads{padding:30px 0 15px 25px;text-align:left}}@media print{.carbon-wrapper{display:none}}.algolia-autocomplete .ds-dropdown-menu{width:460px;min-width:460px;margin-top:18px}.algolia-autocomplete .algolia-docsearch-suggestion--category-header{color:#151515;text-transform:uppercase;font-weight:700;font-size:16px}.algolia-autocomplete .algolia-docsearch-suggestion--subcategory-column{color:#757575}.algolia-autocomplete .algolia-docsearch-suggestion--title{font-weight:600;color:151515}.algolia-autocomplete .algolia-docsearch-suggestion--text{font-size:.8rem;color:gray}.algolia-autocomplete .algolia-docsearch-suggestion--highlight{color:#ed2945;background:#fff2f4}.algolia-autocomplete .ds-dropdown-menu .ds-suggestion.ds-cursor .algolia-docsearch-suggestion.suggestion-layout-simple,.algolia-autocomplete .ds-dropdown-menu .ds-suggestion.ds-cursor .algolia-docsearch-suggestion:not(.suggestion-layout-simple) .algolia-docsearch-suggestion--content{background:#fff8f9}</style><style>.icon-wrapper[_ngcontent-nid-c9], .transition[_ngcontent-nid-c9]{transition:all .2s cubic-bezier(.7,0,.3,1)}.menu-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9], .transition-fast[_ngcontent-nid-c9]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c9]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c9]{*zoom:1}.clearfix[_ngcontent-nid-c9]:after, .clearfix[_ngcontent-nid-c9]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c9]:after{clear:both}.center-element[_ngcontent-nid-c9], .icon-wrapper[_ngcontent-nid-c9]   .nav-icon[_ngcontent-nid-c9]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c9]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c9], .menu-wrapper[_ngcontent-nid-c9]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c9]{box-sizing:border-box}[_nghost-nid-c9]{background:#151515;display:block;width:100%;height:70px;position:fixed;z-index:10000}@media print{[_nghost-nid-c9]{position:relative}}header[_ngcontent-nid-c9]{width:100%;display:block}.icon-wrapper[_ngcontent-nid-c9], header[_ngcontent-nid-c9]{height:100%;position:relative}.icon-wrapper[_ngcontent-nid-c9]{width:80px;top:0;bottom:0;display:inline-block;z-index:10000;border:none;background:transparent}.icon-wrapper[_ngcontent-nid-c9]:hover{cursor:pointer;background:#212121}.icon-wrapper.opened[_ngcontent-nid-c9]{width:250px}@media only screen and (max-width: 1200px){.icon-wrapper.opened[_ngcontent-nid-c9]{width:250px}}@media only screen and (max-width: 991px){.icon-wrapper.opened[_ngcontent-nid-c9]{width:80px}}.icon-wrapper[_ngcontent-nid-c9]   .nav-icon[_ngcontent-nid-c9]   svg[_ngcontent-nid-c9]{width:30px;height:30px;fill:#fff}@media only screen and (max-width : 767px){.icon-wrapper[_ngcontent-nid-c9]{background:transparent}}@media print{.icon-wrapper[_ngcontent-nid-c9]{display:none}}[_nghost-nid-c9]     .logo-wrapper{display:inline-block;height:100%;text-align:center;vertical-align:top;padding-left:85px}@media only screen and (max-width: 1200px){[_nghost-nid-c9]     .logo-wrapper{padding-left:15px}}@media only screen and (max-width : 767px){[_nghost-nid-c9]     .logo-wrapper{padding-left:10px}}[_nghost-nid-c9]     .logo-wrapper a{display:inline-block;padding-top:10px}@media print{[_nghost-nid-c9]     .logo-wrapper{left:50%;position:relative;transform:translate(-50%);padding:0}}.menu-wrapper[_ngcontent-nid-c9]{position:relative;float:right;padding:14px 25px}@media (min-width: 1500px){.menu-wrapper[_ngcontent-nid-c9]{margin-right:80px}}@media (max-width: 1499px){.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9]:first-of-type{display:none}.menu-wrapper[_ngcontent-nid-c9]   .search-wrapper[_ngcontent-nid-c9]{margin-right:0}}@media (max-width: 1250px){.menu-wrapper[_ngcontent-nid-c9]{padding:14px 5px}}@media (max-width: 1150px){.menu-wrapper[_ngcontent-nid-c9]   ul[_ngcontent-nid-c9]{display:none!important}}@media (max-width: 600px){.menu-wrapper[_ngcontent-nid-c9]   .search-wrapper[_ngcontent-nid-c9]{display:none}}@media only screen and (max-width: 1200px){.menu-wrapper[_ngcontent-nid-c9]{margin-right:0;padding:14px 5px}}@media only screen and (max-width: 991px){.menu-wrapper[_ngcontent-nid-c9]   ul[_ngcontent-nid-c9]{display:none!important}}@media only screen and (max-width : 480px){.menu-wrapper[_ngcontent-nid-c9]   .search-wrapper[_ngcontent-nid-c9]{display:none}}.menu-wrapper[_ngcontent-nid-c9]   ul[_ngcontent-nid-c9]{padding:0}.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9], .menu-wrapper[_ngcontent-nid-c9]   ul[_ngcontent-nid-c9]{display:inline-block;vertical-align:middle}.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9]{margin-left:30px}.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9]:first-of-type{margin-left:0}.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9]:last-of-type   a[_ngcontent-nid-c9]{border-radius:2px;padding:4px 6px;background:#ed2945}.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9]:last-of-type   a[_ngcontent-nid-c9]:hover{background:#262626}@media only screen and (max-width: 1200px){.menu-wrapper[_ngcontent-nid-c9]   li[_ngcontent-nid-c9]{margin-left:20px}}.menu-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9]{color:#fff;text-transform:uppercase;font-size:14px;font-weight:600}.menu-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9]:hover{color:#ed2945}@media print{.menu-wrapper[_ngcontent-nid-c9]{display:none}}.workshop-wrapper[_ngcontent-nid-c9]{float:right;padding:14px 25px}@media only screen and (max-width : 767px){.workshop-wrapper[_ngcontent-nid-c9]{padding:23px 15px}}@media only screen and (max-width : 480px){.workshop-wrapper[_ngcontent-nid-c9]{display:none}}.workshop-wrapper[_ngcontent-nid-c9]   img[_ngcontent-nid-c9]{margin-right:10px;width:55px}@media only screen and (max-width : 767px){.workshop-wrapper[_ngcontent-nid-c9]   img[_ngcontent-nid-c9]{display:none!important}}.workshop-wrapper[_ngcontent-nid-c9]   .workshop-info[_ngcontent-nid-c9], .workshop-wrapper[_ngcontent-nid-c9]   img[_ngcontent-nid-c9]{display:inline-block;vertical-align:middle}.workshop-wrapper[_ngcontent-nid-c9]   h3[_ngcontent-nid-c9]{font-size:15px;font-weight:400;color:#fff;margin:0}.workshop-wrapper[_ngcontent-nid-c9]   .short-title[_ngcontent-nid-c9]{display:none}@media only screen and (max-width : 767px){.workshop-wrapper[_ngcontent-nid-c9]   .short-title[_ngcontent-nid-c9]{display:block}.workshop-wrapper[_ngcontent-nid-c9]   .long-title[_ngcontent-nid-c9]{display:none}}.workshop-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9]{color:#03a9f4;font-weight:600;font-size:12px;position:relative}.workshop-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9]:hover{color:#ed2945}.workshop-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9]:hover:after{background:#ed2945}.workshop-wrapper[_ngcontent-nid-c9]   a[_ngcontent-nid-c9]:after{content:"";display:block;background:#246081;height:2px;left:0;right:0;bottom:-1px;position:absolute}.workshop-wrapper[_ngcontent-nid-c9]   span[_ngcontent-nid-c9]{display:inline-block;padding:1px 2px;font-weight:700;background:linear-gradient(#ee2943,#d31e5a)}@media (max-width: 480px){.workshop-wrapper[_ngcontent-nid-c9]{display:none}[_nghost-nid-c9]     .logo-wrapper{width:100%}.icon-wrapper[_ngcontent-nid-c9]{position:absolute}}.fa-stack-overflow[_ngcontent-nid-c9]{font-size:18px}.mobile-nav-icon[_ngcontent-nid-c9]{display:none;width:25px;margin-top:5px;cursor:pointer}@media only screen and (max-width: 1200px){.mobile-nav-icon[_ngcontent-nid-c9]{display:inline-block}}.mobile-nav-icon[_ngcontent-nid-c9]:after, .mobile-nav-icon[_ngcontent-nid-c9]:before, .mobile-nav-icon[_ngcontent-nid-c9]   span[_ngcontent-nid-c9]{content:"";background:#fff;display:block;height:2px;width:100%}.mobile-nav-icon[_ngcontent-nid-c9]   span[_ngcontent-nid-c9]{margin:6px 0}@media only screen and (max-width: 1200px){.desktop-nav-icon[_ngcontent-nid-c9]{display:none}}.search-wrapper[_ngcontent-nid-c9]{margin-right:2em;height:100%;display:inline-block;position:relative}.search-icon[_ngcontent-nid-c9]{position:absolute;margin-top:7px;color:#a5a5a5;font-size:14px}.search-input[_ngcontent-nid-c9]{background:transparent;border:0;border-bottom:2px solid #414141;padding:5px 20px 5px 28px;color:#fff;font-family:Source Sans Pro,Helvetica Neue,sans-serif;font-display:swap;font-size:14px;outline:0!important;transition:all 90ms ease-in-out;width:165px}.search-input[_ngcontent-nid-c9]:active, .search-input[_ngcontent-nid-c9]:focus{border-bottom-color:#ed2945;width:190px}.search-input[_ngcontent-nid-c9]::-moz-placeholder{color:#a5a5a5;opacity:1}.search-input[_ngcontent-nid-c9]::placeholder{color:#a5a5a5;opacity:1}.close-icon[_ngcontent-nid-c9]{position:absolute;right:0;width:15px;height:15px;top:10px;cursor:pointer;visibility:hidden;transition:all 90ms ease-in-out}.close-icon.visible[_ngcontent-nid-c9]{visibility:visible}.close-icon[_ngcontent-nid-c9]:after, .close-icon[_ngcontent-nid-c9]:before{content:"";background:#ed2945;display:block;height:2px;position:absolute;width:15px}.close-icon[_ngcontent-nid-c9]:after{transform:rotate(45deg) translateY(3px)}.close-icon[_ngcontent-nid-c9]:before{transform:rotate(-45deg) translateY(3px)}@media (max-width: 1300px){.shop-link[_ngcontent-nid-c9]{display:none!important}}</style><style>.btn-support[_ngcontent-nid-c11], .btn-version[_ngcontent-nid-c11], .transition[_ngcontent-nid-c11], [_nghost-nid-c11]{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast[_ngcontent-nid-c11]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c11]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c11]{*zoom:1}.clearfix[_ngcontent-nid-c11]:after, .clearfix[_ngcontent-nid-c11]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c11]:after{clear:both}.center-element[_ngcontent-nid-c11]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c11]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c11]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c11], [_nghost-nid-c11]{box-sizing:border-box}[_nghost-nid-c11]{transform:translateX(-100%);padding:90px 17px 40px 24px;width:250px;background:#f5f5f5;position:fixed!important;bottom:0;top:0;z-index:1000;overflow:hidden}.opened[_nghost-nid-c11]{transform:translateX(0)}@media only screen and (max-width: 1200px){[_nghost-nid-c11]{width:250px}}@media only screen and (max-width: 991px){.opened[_nghost-nid-c11]{z-index:1000;box-shadow:0 10px 40px rgba(0,0,0,.1)}}@media only screen and (max-width : 767px){[_nghost-nid-c11]{padding:85px 25px 20px}}@media only screen and (max-width : 480px){[_nghost-nid-c11]{width:100%}}@media print{[_nghost-nid-c11]{display:none}}.nav-item[_ngcontent-nid-c11]{margin:0 -10px;padding:0 10px}.nav-item[_ngcontent-nid-c11]:last-of-type{border:0}.nav-item[_ngcontent-nid-c11]   h3[_ngcontent-nid-c11]{margin:20px 0}.btn-support[_ngcontent-nid-c11], .btn-version[_ngcontent-nid-c11]{border-radius:2px;padding:10px;box-sizing:border-box;font-weight:700;font-size:13px;text-transform:uppercase;text-align:left;width:calc(100% - 10px);display:block}.btn-version[_ngcontent-nid-c11]{background:#dfdfdf;margin-top:5px;color:#151515}.btn-version[_ngcontent-nid-c11]:hover{background:#ccc}.btn-support[_ngcontent-nid-c11]{margin-top:20px;background:#ed2945;color:#fff}.btn-support[_ngcontent-nid-c11]:hover{background:#151515}</style><style>.transition[_ngcontent-nid-c12]{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast[_ngcontent-nid-c12]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c12]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c12]{*zoom:1}.clearfix[_ngcontent-nid-c12]:after, .clearfix[_ngcontent-nid-c12]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c12]:after{clear:both}.center-element[_ngcontent-nid-c12]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c12]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c12]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c12], .toc-wrapper[_ngcontent-nid-c12]{box-sizing:border-box}.toc-wrapper[_ngcontent-nid-c12]{width:250px;padding-left:45px;position:fixed;top:90px;right:20px;max-height:350px;max-height:calc(100vh - 350px)}@media print{.toc-wrapper[_ngcontent-nid-c12]{display:none}}.toc-wrapper[_ngcontent-nid-c12]   ul[_ngcontent-nid-c12]{position:relative;padding:0}.toc-wrapper[_ngcontent-nid-c12]   ul[_ngcontent-nid-c12]:before{content:"";position:absolute;left:0;top:10px;bottom:10px;width:2px;background:#efefef}.toc-wrapper[_ngcontent-nid-c12]   li[_ngcontent-nid-c12]{display:block;position:relative;padding-left:30px;font-size:14px;line-height:24px;margin-bottom:6px}.toc-wrapper[_ngcontent-nid-c12]   li[_ngcontent-nid-c12]:hover{color:#ed2945}.toc-wrapper[_ngcontent-nid-c12]   .current[_ngcontent-nid-c12]{color:#ed2945;font-weight:600}.toc-wrapper[_ngcontent-nid-c12]   .current[_ngcontent-nid-c12]:before{background:#ed2945;border-color:#ed2945;border-width:1px;left:-3px}.toc-wrapper[_ngcontent-nid-c12]   li[_ngcontent-nid-c12]:before{border-radius:50%;transform:translateY(-50%);content:"";background:#fdfdfd;border:2px solid #efefef;left:-4px;width:6px;height:6px;top:50%;display:inline-block;position:absolute}.toc-wrapper[_ngcontent-nid-c12]   li[_ngcontent-nid-c12]:last-of-type:before{top:auto;bottom:0}.toc-wrapper[_ngcontent-nid-c12]   a[_ngcontent-nid-c12]{color:#404040;font-weight:400}.toc-wrapper[_ngcontent-nid-c12]   a[_ngcontent-nid-c12]:hover{color:#ed2945}.toc-wrapper[_ngcontent-nid-c12]   .current[_ngcontent-nid-c12]   a[_ngcontent-nid-c12]{font-weight:600;color:#ed2945}</style><style>.transition[_ngcontent-nid-c13]{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast[_ngcontent-nid-c13]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c13]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c13]{*zoom:1}.clearfix[_ngcontent-nid-c13]:after, .clearfix[_ngcontent-nid-c13]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c13]:after{clear:both}.center-element[_ngcontent-nid-c13]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c13]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c13]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c13]{box-sizing:border-box}.newsletter-wrapper[_ngcontent-nid-c13]{background:#e8e8e8;padding:40px 85px;overflow:hidden;position:relative;margin:0 -85px;width:auto}@media only screen and (max-width: 1200px){.newsletter-wrapper[_ngcontent-nid-c13]{margin:0 -50px;padding:40px 50px}}@media only screen and (max-width : 767px){.newsletter-wrapper[_ngcontent-nid-c13]{margin:0 -20px;padding:40px 20px;width:100%;text-align:center}}.newsletter-wrapper[_ngcontent-nid-c13]   h3[_ngcontent-nid-c13]{font-size:18px;font-weight:600;margin:0 0 4px;color:#111}.newsletter-wrapper[_ngcontent-nid-c13]   p[_ngcontent-nid-c13]{font-size:15px;margin:0;color:#7b7b7b;font-weight:500;line-height:22px}.newsletter-form[_ngcontent-nid-c13], .newsletter-wrapper[_ngcontent-nid-c13]   .hgroup[_ngcontent-nid-c13]{display:inline-block;vertical-align:middle}.newsletter-form[_ngcontent-nid-c13]{text-align:right;width:40%;position:relative;margin-top:5px}.newsletter-wrapper[_ngcontent-nid-c13]   .hgroup[_ngcontent-nid-c13]{width:60%;float:left;position:relative}.newsletter-form[_ngcontent-nid-c13]   .form-control[_ngcontent-nid-c13]{border:0;font-size:13px;padding:10px 20px;background:#fdfdfd;width:calc(100% - 70px);box-shadow:-2px 2px 3px #dcdcdc;border-radius:3px;max-width:100%}.newsletter-form[_ngcontent-nid-c13]   .form-control[_ngcontent-nid-c13], .newsletter-form[_ngcontent-nid-c13]   button[_ngcontent-nid-c13]{height:40px;vertical-align:middle;box-sizing:border-box;outline:0}.newsletter-form[_ngcontent-nid-c13]   button[_ngcontent-nid-c13]{background:#ed1543;padding:10px 18px;border:0;color:#fff;margin-left:-45px;font-size:14px;border-top-right-radius:3px;border-bottom-right-radius:3px;transition:all .2s ease-in-out;cursor:pointer}.newsletter-form[_ngcontent-nid-c13]   button[_ngcontent-nid-c13]:hover, .newsletter-form[_ngcontent-nid-c13]   button[disabled][_ngcontent-nid-c13]{background:#111}.newsletter-form[_ngcontent-nid-c13]   .btn-success[_ngcontent-nid-c13]   .fa-paper-plane[_ngcontent-nid-c13], .newsletter-form[_ngcontent-nid-c13]   button[_ngcontent-nid-c13]   .icon-success[_ngcontent-nid-c13]{display:none}.newsletter-form[_ngcontent-nid-c13]   .btn-success[disabled][_ngcontent-nid-c13]{background:#d3e6d4;color:#1dd81c;pointer-events:none}.newsletter-form[_ngcontent-nid-c13]   .btn-success[_ngcontent-nid-c13]   .icon-success[_ngcontent-nid-c13]{display:inline-block}.newsletter-wrapper[_ngcontent-nid-c13]   .envelope-bg[_ngcontent-nid-c13]{font-size:180px;position:absolute;margin-top:-50px;margin-left:60px;color:#dedede;z-index:0;transform:rotate(-30deg)}@media (max-width: 1020px){.newsletter-form[_ngcontent-nid-c13], .newsletter-wrapper[_ngcontent-nid-c13]   .hgroup[_ngcontent-nid-c13]{width:50%}}@media (max-width: 990px){.newsletter-form[_ngcontent-nid-c13], .newsletter-wrapper[_ngcontent-nid-c13]   .hgroup[_ngcontent-nid-c13]{width:100%}.newsletter-wrapper[_ngcontent-nid-c13]   .hgroup[_ngcontent-nid-c13]{float:none;text-align:center}.newsletter-form[_ngcontent-nid-c13]{margin-top:30px;text-align:center}.newsletter-form[_ngcontent-nid-c13]   .form-control[_ngcontent-nid-c13]{margin-left:0}.newsletter-wrapper[_ngcontent-nid-c13]   .envelope-bg[_ngcontent-nid-c13]{font-size:280px}.newsletter-form[_ngcontent-nid-c13]   .form-control[_ngcontent-nid-c13]{max-width:400px;width:calc(100% - 10px)}}</style><style>.social-wrapper[_ngcontent-nid-c14]   a[_ngcontent-nid-c14], .transition[_ngcontent-nid-c14], [_nghost-nid-c14], footer[_ngcontent-nid-c14]   a[_ngcontent-nid-c14]{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast[_ngcontent-nid-c14]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c14]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c14]{*zoom:1}.clearfix[_ngcontent-nid-c14]:after, .clearfix[_ngcontent-nid-c14]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c14]:after{clear:both}.center-element[_ngcontent-nid-c14]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c14]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c14]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c14], [_nghost-nid-c14]{box-sizing:border-box}[_nghost-nid-c14]{background:#151515;display:block;padding:40px 0;margin:0 -85px;width:auto;font-size:14px;position:relative;z-index:12}@media only screen and (max-width: 1200px){[_nghost-nid-c14]{margin:0 -50px}}@media only screen and (max-width : 767px){[_nghost-nid-c14]{padding:15px;margin:0 -20px;width:calc(100% + 40px);position:static;height:auto;text-align:center}}footer[_ngcontent-nid-c14]{display:block;position:relative;color:#929292;text-align:center}footer[_ngcontent-nid-c14]   a[_ngcontent-nid-c14]{font-weight:600}footer[_ngcontent-nid-c14]   a[_ngcontent-nid-c14], footer[_ngcontent-nid-c14]   a[_ngcontent-nid-c14]:hover{color:#ed2945}footer[_ngcontent-nid-c14]   .separator[_ngcontent-nid-c14]{display:inline-block;width:2px;height:12px;margin:0 3px 0 5px;vertical-align:middle;background:#313131}footer[_ngcontent-nid-c14]   p[_ngcontent-nid-c14]{line-height:25px;margin-bottom:0}.social-wrapper[_ngcontent-nid-c14]{text-align:center;right:40px}.social-wrapper[_ngcontent-nid-c14]   a[_ngcontent-nid-c14]{display:inline-block;vertical-align:middle;color:#f3f5f7;font-size:20px;margin-left:15px;cursor:pointer}.social-wrapper[_ngcontent-nid-c14]   a[_ngcontent-nid-c14]:first-of-type{font-size:20px}.social-wrapper[_ngcontent-nid-c14]   a[_ngcontent-nid-c14]:hover{color:#ed2945}@media print{.social-wrapper[_ngcontent-nid-c14]{display:none}}</style><style>.transition[_ngcontent-nid-c8]{transition:all .2s cubic-bezier(.7,0,.3,1)}.social-wrapper[_ngcontent-nid-c8]   a[_ngcontent-nid-c8], .transition-fast[_ngcontent-nid-c8]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c8]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c8]{*zoom:1}.clearfix[_ngcontent-nid-c8]:after, .clearfix[_ngcontent-nid-c8]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c8]:after{clear:both}.center-element[_ngcontent-nid-c8]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c8]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c8], .social-wrapper[_ngcontent-nid-c8]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c8]{box-sizing:border-box}.social-wrapper[_ngcontent-nid-c8]{float:right;padding-right:40px;position:relative}.social-wrapper[_ngcontent-nid-c8]   a[_ngcontent-nid-c8]{display:inline-block;vertical-align:middle;color:#fff;font-size:18px;margin-left:15px;cursor:pointer}.social-wrapper[_ngcontent-nid-c8]   a[_ngcontent-nid-c8]   .discord-icon[_ngcontent-nid-c8]{fill:#fff;position:relative}.social-wrapper[_ngcontent-nid-c8]   a[_ngcontent-nid-c8]   .discord-icon[_ngcontent-nid-c8]:hover{fill:#ed2945}.social-wrapper[_ngcontent-nid-c8]   a[_ngcontent-nid-c8]:first-of-type{font-size:20px}.social-wrapper[_ngcontent-nid-c8]   a[_ngcontent-nid-c8]:hover{color:#ed2945}@media only screen and (max-width : 767px){.social-wrapper[_ngcontent-nid-c8]{padding-right:20px}}@media only screen and (max-width : 480px){.social-wrapper[_ngcontent-nid-c8]{display:none}}@media print{.social-wrapper[_ngcontent-nid-c8]{display:none}}</style><style>.transition[_ngcontent-nid-c18]{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast[_ngcontent-nid-c18]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c18]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c18]{*zoom:1}.clearfix[_ngcontent-nid-c18]:after, .clearfix[_ngcontent-nid-c18]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c18]:after{clear:both}.center-element[_ngcontent-nid-c18]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c18]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c18]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c18]{box-sizing:border-box}.tabs-wrapper[_ngcontent-nid-c18]{position:absolute;right:0;top:0;bottom:0}.tab[_ngcontent-nid-c18]{color:#dfdfdf;cursor:pointer;margin:0;float:right;font-weight:600;height:100%;padding:12px 20px;box-sizing:border-box;-webkit-box-sizing:border-box}.tab[_ngcontent-nid-c18]:hover:not(.active){color:#efefef}.tab.active[_ngcontent-nid-c18]{display:none}</style><style>.banner[_ngcontent-nid-c23]{background-color:#111;background-image:url(/assets/banners/shop.jpg)}</style><style>.banner[_ngcontent-nid-c22]{background-color:#111;background-image:url(/assets/banners/enterprise.jpg)}.banner[_ngcontent-nid-c22]   ul[_ngcontent-nid-c22]{max-width:820px}</style><style>.banner[_ngcontent-nid-c20]{background-color:#111;background-image:url(/assets/banners/courses.jpg)}</style><style>.arrow-icon[_ngcontent-nid-c10], .transition[_ngcontent-nid-c10], h3[_ngcontent-nid-c10]{transition:all .2s cubic-bezier(.7,0,.3,1)}.transition-fast[_ngcontent-nid-c10]{transition:all .1s cubic-bezier(.7,0,.3,1)}.transition-slow[_ngcontent-nid-c10]{transition:all .52s cubic-bezier(.7,0,.3,1)}.clearfix[_ngcontent-nid-c10]{*zoom:1}.clearfix[_ngcontent-nid-c10]:after, .clearfix[_ngcontent-nid-c10]:before{content:" ";display:table}.clearfix[_ngcontent-nid-c10]:after{clear:both}.center-element[_ngcontent-nid-c10]{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%)}.center-left[_ngcontent-nid-c10]{position:absolute;left:50%;transform:translateX(-50%)}.center-top[_ngcontent-nid-c10]{position:absolute;top:50%;transform:translateY(-50%)}.box-sizing[_ngcontent-nid-c10]{box-sizing:border-box}[_nghost-nid-c10]{position:relative;display:block}h3[_ngcontent-nid-c10]{text-transform:uppercase;font-weight:700;color:#151515;font-size:15px;margin:10px 0}.active[_ngcontent-nid-c10]   h3[_ngcontent-nid-c10], h3[_ngcontent-nid-c10]:hover{color:#ed2945}.material-icons[_ngcontent-nid-c10]{margin-right:5px}.arrow-icon[_ngcontent-nid-c10]{transform:rotate(90deg);position:absolute;top:1px;right:20px;font-size:20px;cursor:pointer}li[_ngcontent-nid-c10]{display:block;padding:2.5px 0}li[_ngcontent-nid-c10]:first-of-type{padding-top:0}li[_ngcontent-nid-c10]   a[_ngcontent-nid-c10]{color:#151515;font-size:14px;text-decoration:none;cursor:pointer}li[_ngcontent-nid-c10]   a.active[_ngcontent-nid-c10], li[_ngcontent-nid-c10]   a[_ngcontent-nid-c10]:hover{color:#ed2945}li[_ngcontent-nid-c10]   a.active[_ngcontent-nid-c10]{font-weight:600}li[_ngcontent-nid-c10]   .pending[_ngcontent-nid-c10]{color:#afafaf!important;pointer-events:none}.nav-item[_ngcontent-nid-c10]   ul[_ngcontent-nid-c10]{margin:10px 0 15px}.nav-item.opened[_ngcontent-nid-c10]   .arrow-icon[_ngcontent-nid-c10]{transform:rotate(-90deg);fill:#ed2945}.heading[_ngcontent-nid-c10]{cursor:pointer}.heading[_ngcontent-nid-c10]:hover   .arrow-icon[_ngcontent-nid-c10]{color:#ed2945}ul[_ngcontent-nid-c10]{padding-left:15px}.material-icons[_ngcontent-nid-c10]{font-size:14px;margin-left:3px;vertical-align:middle;padding-bottom:4px}.has-icon[_ngcontent-nid-c10]   h3[_ngcontent-nid-c10]{color:#ed2945}</style><script id="_carbonads_projs" type="text/javascript" src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/CK7I653M.json"></script></head>

  <body>
    <app-root ng-version="12.1.4"><router-outlet></router-outlet><app-homepage class="ng-star-inserted"><app-header _nghost-nid-c9=""><header _ngcontent-nid-c9=""><button _ngcontent-nid-c9="" class="icon-wrapper opened"><div _ngcontent-nid-c9="" class="nav-icon"><div _ngcontent-nid-c9="" class="mobile-nav-icon"><span _ngcontent-nid-c9=""></span></div><svg _ngcontent-nid-c9="" height="512pt" viewBox="0 -27 512 512" width="512pt" xmlns="http://www.w3.org/2000/svg" class="desktop-nav-icon"><path _ngcontent-nid-c9="" d="m213.117188 81.011719c6.273437-5.488281 6.910156-15.027344 1.421874-21.300781-5.492187-6.273438-15.027343-6.910157-21.300781-1.421876l-2.597656 2.273438c-6.273437 5.488281-6.910156 15.027344-1.421875 21.300781 2.984375 3.410157 7.164062 5.15625 11.367188 5.15625 3.527343 0 7.070312-1.230469 9.933593-3.734375zm0 0"></path><path _ngcontent-nid-c9="" d="m117.898438 120.203125-2.597657 2.273437c-6.273437 5.492188-6.910156 15.027344-1.421875 21.300782 2.984375 3.414062 7.164063 5.15625 11.367188 5.15625 3.527344 0 7.070312-1.226563 9.933594-3.730469l2.597656-2.273437c6.273437-5.492188 6.910156-15.027344 1.421875-21.300782-5.488281-6.277344-15.027344-6.914062-21.300781-1.425781zm0 0"></path><path _ngcontent-nid-c9="" d="m216.179688 121.503906-2.597657 2.273438c-6.269531 5.492187-6.90625 15.027344-1.417969 21.300781 2.984376 3.414063 7.164063 5.15625 11.367188 5.15625 3.527344 0 7.070312-1.230469 9.933594-3.738281l2.597656-2.273438c6.273438-5.488281 6.910156-15.027344 1.417969-21.300781-5.488281-6.273437-15.023438-6.90625-21.300781-1.417969zm0 0"></path><path _ngcontent-nid-c9="" d="m315.523438 70.039062.253906-3.441406c.609375-8.316406-5.636719-15.550781-13.949219-16.160156s-15.550781 5.636719-16.160156 13.949219l-.253907 3.441406c-.609374 8.316406 5.636719 15.550781 13.949219 16.160156.375.027344.75.042969 1.121094.042969 7.835937 0 14.457031-6.054688 15.039063-13.992188zm0 0"></path><path _ngcontent-nid-c9="" d="m403.570312 96.273438c-5.109374-6.589844-14.589843-7.789063-21.179687-2.683594-6.589844 5.109375-7.789063 14.589844-2.683594 21.179687l2.117188 2.730469c2.976562 3.835938 7.433593 5.847656 11.941406 5.847656 3.230469 0 6.484375-1.035156 9.238281-3.167968 6.585938-5.105469 7.789063-14.589844 2.679688-21.179688zm0 0"></path><path _ngcontent-nid-c9="" d="m325.449219 118.675781c-8.308594-.628906-15.550781 5.632813-16.164063 13.945313l-.253906 3.441406c-.613281 8.316406 5.632812 15.550781 13.945312 16.164062.378907.027344.753907.042969 1.125.042969 7.832032 0 14.453126-6.050781 15.039063-13.988281l.253906-3.441406c.613281-8.316406-5.632812-15.550782-13.945312-16.164063zm0 0"></path><path _ngcontent-nid-c9="" d="m479.355469 183.492188v-22.644532c0-88.691406-72.15625-160.847656-160.847657-160.847656h-116.597656c-88.691406 0-160.847656 72.15625-160.847656 160.847656v19.882813c-23.519531 5.632812-41.0625 26.820312-41.0625 52.039062v3.253907c0 25.21875 17.542969 46.40625 41.0625 52.039062v26.367188c0 3.339843.507812 6.597656 1.441406 9.6875v2.667968c0 72.097656 58.652344 130.75 130.75 130.75h175.351563c72.097656 0 130.75-58.652344 130.75-130.75v-41.484375c19.167969-8.152343 32.644531-27.171875 32.644531-49.277343v-3.253907c0-22.109375-13.476562-41.125-32.644531-49.277343zm-408.101563-22.644532c0-72.046875 58.609375-130.65625 130.65625-130.65625h116.597656c72.046876 0 130.65625 58.609375 130.65625 130.65625v18.402344h-377.910156zm377.910156 165.9375c0 4.710938-3.179687 7-4.546874 7.765625-1.378907.769531-5.023438 2.296875-9.082032-.191406-1.34375-.824219-2.664062-1.664063-3.980468-2.503906-10.746094-6.835938-24.117188-15.347657-48.917969-15.347657-24.804688 0-38.175781 8.507813-48.917969 15.347657-9.328125 5.9375-16.699219 10.628906-32.707031 10.628906-16.007813 0-23.375-4.6875-32.703125-10.628906-10.746094-6.835938-24.113282-15.347657-48.917969-15.347657-24.800781 0-38.171875 8.511719-48.914063 15.347657-9.328124 5.9375-16.695312 10.628906-32.703124 10.628906-16.003907 0-23.375-4.6875-32.699219-10.628906-7.894531-5.023438-16.839844-10.714844-30.464844-13.5625-1.425781-.296875-2.53125-1.210938-3.042969-2.394531-.03125-.078126-.058594-.160157-.09375-.238282-.136718-.390625-.21875-.800781-.21875-1.230468v-24.886719h377.910156zm-100.558593 100.558594h-175.355469c-47.492188 0-87.398438-33.097656-97.871094-77.4375 4.75 1.863281 8.773438 4.421875 13.480469 7.417969 10.742187 6.839843 24.113281 15.351562 48.914063 15.351562 24.800781 0 38.171874-8.511719 48.914062-15.351562 9.328125-5.9375 16.695312-10.628907 32.703125-10.628907s23.375 4.691407 32.703125 10.628907c10.746094 6.839843 24.113281 15.351562 48.917969 15.351562 24.800781 0 38.171875-8.511719 48.917969-15.351562 9.328124-5.9375 16.695312-10.628907 32.703124-10.628907 16.007813 0 23.378907 4.691407 32.707032 10.628907 1.460937.929687 2.917968 1.859375 4.40625 2.769531 6.667968 4.089844 14.089844 6.027344 21.488281 5.828125-15.292969 36.0625-51.054687 61.421875-92.628906 61.421875zm133.203125-191.320312c0 12.863281-10.464844 23.328124-23.328125 23.328124h-404.960938c-12.863281 0-23.328125-10.464843-23.328125-23.328124v-3.253907c0-12.863281 10.464844-23.328125 23.328125-23.328125h404.960938c12.863281 0 23.328125 10.464844 23.328125 23.328125zm0 0"></path></svg></div></button><div class="logo-wrapper"><a href="https://docs.nestjs.com/" title="Documentation | NestJS - A node.js framework built on top of TypeScript"><img alt="NestJS Logo" src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/logo-small.svg"></a></div><app-social-wrapper _ngcontent-nid-c9="" _nghost-nid-c8=""><div _ngcontent-nid-c8="" class="social-wrapper"><a _ngcontent-nid-c8="" href="https://twitter.com/nestframework" title="Twitter account" target="_blank"><svg _ngcontent-nid-c8="" class="svg-inline--fa fa-twitter fa-w-16" aria-hidden="true" data-prefix="fab" data-icon="twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"></path></svg><!-- <i _ngcontent-nid-c8="" class="fab fa-twitter"></i> --></a><a _ngcontent-nid-c8="" href="https://github.com/nestjs/nest" title="Github repository" target="_blank"><svg _ngcontent-nid-c8="" class="svg-inline--fa fa-github fa-w-16" aria-hidden="true" data-prefix="fab" data-icon="github" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" data-fa-i2svg=""><path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg><!-- <i _ngcontent-nid-c8="" class="fab fa-github"></i> --></a><a _ngcontent-nid-c8="" href="https://stackoverflow.com/questions/tagged/nestjs" title="Stackoverflow" target="_blank"><svg _ngcontent-nid-c8="" class="svg-inline--fa fa-stack-overflow fa-w-12" aria-hidden="true" data-prefix="fab" data-icon="stack-overflow" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512" data-fa-i2svg=""><path fill="currentColor" d="M293.7 300l-181.2-84.5 16.7-36.5 181.3 84.7-16.8 36.3zm48-76L188.2 95.7l-25.5 30.8 153.5 128.3 25.5-30.8zm39.6-31.7L262 32l-32 24 119.3 160.3 32-24zM290.7 311L95 269.7 86.8 309l195.7 41 8.2-39zm31.6 129H42.7V320h-40v160h359.5V320h-40v120zm-39.8-80h-200v39.7h200V360z"></path></svg><!-- <i _ngcontent-nid-c8="" class="fab fa-stack-overflow"></i> --></a><a _ngcontent-nid-c8="" href="https://nestjs.com/" title="NestJS - A node.js framework built on top of TypeScript" target="_blank"><svg _ngcontent-nid-c8="" class="svg-inline--fa fa-globe fa-w-16" aria-hidden="true" data-prefix="fa" data-icon="globe" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M364.215 192h131.43c5.439 20.419 8.354 41.868 8.354 64s-2.915 43.581-8.354 64h-131.43c5.154-43.049 4.939-86.746 0-128zM185.214 352c10.678 53.68 33.173 112.514 70.125 151.992.221.001.44.008.661.008s.44-.008.661-.008c37.012-39.543 59.467-98.414 70.125-151.992H185.214zm174.13-192h125.385C452.802 84.024 384.128 27.305 300.95 12.075c30.238 43.12 48.821 96.332 58.394 147.925zm-27.35 32H180.006c-5.339 41.914-5.345 86.037 0 128h151.989c5.339-41.915 5.345-86.037-.001-128zM152.656 352H27.271c31.926 75.976 100.6 132.695 183.778 147.925-30.246-43.136-48.823-96.35-58.393-147.925zm206.688 0c-9.575 51.605-28.163 104.814-58.394 147.925 83.178-15.23 151.852-71.949 183.778-147.925H359.344zm-32.558-192c-10.678-53.68-33.174-112.514-70.125-151.992-.221 0-.44-.008-.661-.008s-.44.008-.661.008C218.327 47.551 195.872 106.422 185.214 160h141.572zM16.355 192C10.915 212.419 8 233.868 8 256s2.915 43.581 8.355 64h131.43c-4.939-41.254-5.154-84.951 0-128H16.355zm136.301-32c9.575-51.602 28.161-104.81 58.394-147.925C127.872 27.305 59.198 84.024 27.271 160h125.385z"></path></svg><!-- <i _ngcontent-nid-c8="" class="fa fa-globe"></i> --></a><a _ngcontent-nid-c8="" href="https://discord.gg/G7Qnnhy" title="Discord" target="_blank" rel="nofollow"><svg _ngcontent-nid-c8="" class="svg-inline--fa fa-discord fa-w-14" aria-hidden="true" data-prefix="fab" data-icon="discord" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M297.216 243.2c0 15.616-11.52 28.416-26.112 28.416-14.336 0-26.112-12.8-26.112-28.416s11.52-28.416 26.112-28.416c14.592 0 26.112 12.8 26.112 28.416zm-119.552-28.416c-14.592 0-26.112 12.8-26.112 28.416s11.776 28.416 26.112 28.416c14.592 0 26.112-12.8 26.112-28.416.256-15.616-11.52-28.416-26.112-28.416zM448 52.736V512c-64.494-56.994-43.868-38.128-118.784-107.776l13.568 47.36H52.48C23.552 451.584 0 428.032 0 398.848V52.736C0 23.552 23.552 0 52.48 0h343.04C424.448 0 448 23.552 448 52.736zm-72.96 242.688c0-82.432-36.864-149.248-36.864-149.248-36.864-27.648-71.936-26.88-71.936-26.88l-3.584 4.096c43.52 13.312 63.744 32.512 63.744 32.512-60.811-33.329-132.244-33.335-191.232-7.424-9.472 4.352-15.104 7.424-15.104 7.424s21.248-20.224 67.328-33.536l-2.56-3.072s-35.072-.768-71.936 26.88c0 0-36.864 66.816-36.864 149.248 0 0 21.504 37.12 78.08 38.912 0 0 9.472-11.52 17.152-21.248-32.512-9.728-44.8-30.208-44.8-30.208 3.766 2.636 9.976 6.053 10.496 6.4 43.21 24.198 104.588 32.126 159.744 8.96 8.96-3.328 18.944-8.192 29.44-15.104 0 0-12.8 20.992-46.336 30.464 7.68 9.728 16.896 20.736 16.896 20.736 56.576-1.792 78.336-38.912 78.336-38.912z"></path></svg><!-- <i _ngcontent-nid-c8="" class="fab fa-discord"></i> --></a></div></app-social-wrapper><div _ngcontent-nid-c9="" class="menu-wrapper"><div _ngcontent-nid-c9="" class="search-wrapper"><svg _ngcontent-nid-c9="" class="svg-inline--fa fa-search fa-w-16 search-icon" aria-hidden="true" data-prefix="fa" data-icon="search" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"></path></svg><!-- <i _ngcontent-nid-c9="" class="fa fa-search search-icon"></i> --><span class="algolia-autocomplete" style="position: relative; display: inline-block; direction: ltr;"><input _ngcontent-nid-c9="" id="search" placeholder="Search..." class="search-input ds-input" autocomplete="off" spellcheck="false" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-label="search input" aria-owns="algolia-autocomplete-listbox-0" style="position: relative; vertical-align: top;" dir="auto"><pre aria-hidden="true" style="position: absolute; visibility: hidden; white-space: pre; font-family: Source Sans Pro, Helvetica Neue, sans-serif; font-size: 14px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: optimizelegibility; text-transform: none;"></pre><span class="ds-dropdown-menu" style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;" role="listbox" id="algolia-autocomplete-listbox-0"><div class="ds-dataset-1"></div></span></span></div><ul _ngcontent-nid-c9=""><li _ngcontent-nid-c9=""><a _ngcontent-nid-c9="" href="https://nestjs.com/" target="_blank" title="NestJS - A node.js framework built on top of TypeScript">Our website</a></li><li _ngcontent-nid-c9=""><a _ngcontent-nid-c9="" href="https://courses.nestjs.com/" target="_blank" title="Courses | NestJS - A node.js framework built on top of TypeScript">Courses</a></li><li _ngcontent-nid-c9=""><a _ngcontent-nid-c9="" routerlink="/support" href="https://docs.nestjs.com/support">Sponsor us</a></li><li _ngcontent-nid-c9=""><a _ngcontent-nid-c9="" href="https://enterprise.nestjs.com/" target="_blank" title="Enterprise | NestJS - A node.js framework built on top of TypeScript">Enterprise support</a></li></ul></div></header></app-header><div class="container-fluid"><app-menu perfectscrollbar="" _nghost-nid-c11="" class="opened ps ps--active-y"><nav _ngcontent-nid-c11="" class="nav-container"><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-0 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="heading ng-tns-c10-0 ng-star-inserted"><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-0 ng-star-inserted" href="https://docs.nestjs.com/"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-0"><!----> Introduction </h3></a><!----><!----></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-1 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-1 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-1"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-1">Overview</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-1"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-1"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-1 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/first-steps"><!----> First steps </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/controllers"><!----> Controllers </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/providers"><!----> Providers </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/modules"><!----> Modules </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/middleware"><!----> Middleware </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/exception-filters"><!----> Exception filters </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/pipes"><!----> Pipes </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/guards"><!----> Guards </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/interceptors"><!----> Interceptors </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-1 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-1 ng-star-inserted" href="https://docs.nestjs.com/custom-decorators"><!----> Custom decorators </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-2 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-2 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-2"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-2">Fundamentals</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-2"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-2"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-2 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/custom-providers"><!----> Custom providers </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/async-providers"><!----> Asynchronous providers </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/dynamic-modules"><!----> Dynamic modules </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/injection-scopes"><!----> Injection scopes </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/circular-dependency"><!----> Circular dependency </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/module-ref"><!----> Module reference </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/lazy-loading-modules"><!----> Lazy-loading modules </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/execution-context"><!----> Execution context </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/lifecycle-events"><!----> Lifecycle events </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/platform-agnosticism"><!----> Platform agnosticism </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-2 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-2 ng-star-inserted" href="https://docs.nestjs.com/fundamentals/testing"><!----> Testing </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-3 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-3 opened ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-3"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-3">Techniques</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-3"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-3"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-3 ng-trigger ng-trigger-openCloseAnimation"><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted active" href="https://docs.nestjs.com/techniques/database"><!----> Database </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/mongodb"><!----> Mongo </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/configuration"><!----> Configuration </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/validation"><!----> Validation </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/caching"><!----> Caching </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/serialization"><!----> Serialization </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/versioning"><!----> Versioning </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/task-scheduling"><!----> Task scheduling </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/queues"><!----> Queues </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/logger"><!----> Logging </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/cookies"><!----> Cookies </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/events"><!----> Events </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/compression"><!----> Compression </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/file-upload"><!----> File upload </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/streaming-files"><!----> Streaming files </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/http-module"><!----> HTTP module </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/session"><!----> Session </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/mvc"><!----> Model-View-Controller </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/performance"><!----> Performance (Fastify) </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-3 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-3 ng-star-inserted" href="https://docs.nestjs.com/techniques/server-sent-events"><!----> Server-Sent Events </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-4 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-4 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-4"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-4">Security</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-4"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-4"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-4 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/authentication"><!----> Authentication </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/authorization"><!----> Authorization </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/encryption-and-hashing"><!----> Encryption and Hashing </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/helmet"><!----> Helmet </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/cors"><!----> CORS </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/csrf"><!----> CSRF Protection </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-4 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-4 ng-star-inserted" href="https://docs.nestjs.com/security/rate-limiting"><!----> Rate limiting </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-5 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-5 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-5"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-5">GraphQL</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-5"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-5"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-5 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/quick-start"><!----> Quick start </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/resolvers"><!----> Resolvers </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/mutations"><!----> Mutations </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/subscriptions"><!----> Subscriptions </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/scalars"><!----> Scalars </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/directives"><!----> Directives </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/plugins"><!----> Plugins </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/interfaces"><!----> Interfaces </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/unions-and-enums"><!----> Unions and Enums </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/field-middleware"><!----> Field middleware </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/mapped-types"><!----> Mapped types </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/complexity"><!----> Complexity </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/extensions"><!----> Extensions </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/cli-plugin"><!----> CLI Plugin </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/generating-sdl"><!----> Generating SDL </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/other-features"><!----> Other features </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-5 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-5 ng-star-inserted" href="https://docs.nestjs.com/graphql/federation"><!----> Federation </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-6 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-6 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-6"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-6">WebSockets</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-6"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-6"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-6 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-6 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-6 ng-star-inserted" href="https://docs.nestjs.com/websockets/gateways"><!----> Gateways </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-6 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-6 ng-star-inserted" href="https://docs.nestjs.com/websockets/exception-filters"><!----> Exception filters </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-6 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-6 ng-star-inserted" href="https://docs.nestjs.com/websockets/pipes"><!----> Pipes </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-6 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-6 ng-star-inserted" href="https://docs.nestjs.com/websockets/guards"><!----> Guards </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-6 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-6 ng-star-inserted" href="https://docs.nestjs.com/websockets/interceptors"><!----> Interceptors </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-6 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-6 ng-star-inserted" href="https://docs.nestjs.com/websockets/adapter"><!----> Adapters </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-7 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-7 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-7"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-7">Microservices</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-7"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-7"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-7 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/basics"><!----> Overview </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/redis"><!----> Redis </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/mqtt"><!----> MQTT </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/nats"><!----> NATS </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/rabbitmq"><!----> RabbitMQ </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/kafka"><!----> Kafka </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/grpc"><!----> gRPC </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/custom-transport"><!----> Custom transporters </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/exception-filters"><!----> Exception filters </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/pipes"><!----> Pipes </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/guards"><!----> Guards </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-7 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-7 ng-star-inserted" href="https://docs.nestjs.com/microservices/interceptors"><!----> Interceptors </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-8 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="heading ng-tns-c10-8 ng-star-inserted"><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-8 ng-star-inserted" href="https://docs.nestjs.com/application-context"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-8"><!----> Standalone apps </h3></a><!----><!----></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-9 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-9 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-9"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-9">CLI</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-9"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-9"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-9 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-9 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-9 ng-star-inserted" href="https://docs.nestjs.com/cli/overview"><!----> Overview </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-9 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-9 ng-star-inserted" href="https://docs.nestjs.com/cli/monorepo"><!----> Workspaces </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-9 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-9 ng-star-inserted" href="https://docs.nestjs.com/cli/libraries"><!----> Libraries </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-9 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-9 ng-star-inserted" href="https://docs.nestjs.com/cli/usages"><!----> Usage </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-9 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-9 ng-star-inserted" href="https://docs.nestjs.com/cli/scripts"><!----> Scripts </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-10 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-10 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-10"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-10">OpenAPI</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-10"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-10"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-10 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/introduction"><!----> Introduction </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/types-and-parameters"><!----> Types and Parameters </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/operations"><!----> Operations </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/security"><!----> Security </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/mapped-types"><!----> Mapped Types </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/decorators"><!----> Decorators </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/cli-plugin"><!----> CLI Plugin </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/other-features"><!----> Other features </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-10 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-10 ng-star-inserted" href="https://docs.nestjs.com/openapi/migration-guide"><!----> Migration guide </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-11 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-11 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-11"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-11">Recipes</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-11"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-11"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-11 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/crud-generator"><!----> CRUD generator </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/hot-reload"><!----> Hot reload </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/mikroorm"><!----> MikroORM </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/sql-typeorm"><!----> TypeORM </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/mongodb"><!----> Mongoose </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/sql-sequelize"><!----> Sequelize </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/router-module"><!----> Router module </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/swagger"><!----> Swagger </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/terminus"><!----> Health checks </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/cqrs"><!----> CQRS </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/documentation"><!----> Compodoc </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/prisma"><!----> Prisma </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/serve-static"><!----> Serve static </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-11 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-11 ng-star-inserted" href="https://docs.nestjs.com/recipes/nest-commander"><!----> Commander </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-12 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-12 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-12"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-12">FAQ</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-12"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-12"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-12 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/serverless"><!----> Serverless </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/http-adapter"><!----> HTTP adapter </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/global-prefix"><!----> Global path prefix </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/hybrid-application"><!----> Hybrid application </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/multiple-servers"><!----> HTTPS &amp; multiple servers </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/request-lifecycle"><!----> Request lifecycle </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-12 ng-star-inserted" href="https://docs.nestjs.com/faq/common-errors"><!----> Common errors </a><!----><!----></li><li _ngcontent-nid-c10="" class="ng-tns-c10-12 ng-star-inserted" style=""><!----><a _ngcontent-nid-c10="" target="_blank" class="ng-tns-c10-12 ng-star-inserted" href="https://github.com/nestjs/nest/tree/master/sample"><!----> Examples </a><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-13 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="heading ng-tns-c10-13 ng-star-inserted"><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-13 ng-star-inserted" href="https://docs.nestjs.com/migration-guide"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-13"><!----> Migration guide </h3></a><!----><!----></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-14 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="heading ng-tns-c10-14 ng-star-inserted"><!----><a _ngcontent-nid-c10="" target="_blank" class="ng-tns-c10-14 ng-star-inserted" href="https://courses.nestjs.com/"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-14"><!----> Official courses </h3></a><!----></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-15 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="nav-item ng-tns-c10-15 ng-star-inserted"><div _ngcontent-nid-c10="" class="heading ng-tns-c10-15"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-15">Discover</h3><svg _ngcontent-nid-c10="" width="20" height="20" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" class="arrow-icon ng-tns-c10-15"><path _ngcontent-nid-c10="" d="M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z" class="ng-tns-c10-15"></path></svg></div><ul _ngcontent-nid-c10="" class="sub-nav ng-tns-c10-15 ng-trigger ng-trigger-openCloseAnimation" style="display: none;"><li _ngcontent-nid-c10="" class="ng-tns-c10-15 ng-star-inserted" style=""><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-15 ng-star-inserted" href="https://docs.nestjs.com/discover/companies"><!----> Who is using Nest? </a><!----><!----></li><!----></ul></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-16 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="heading ng-tns-c10-16 ng-star-inserted"><!----><a _ngcontent-nid-c10="" target="_blank" class="ng-tns-c10-16 ng-star-inserted" href="https://nestjs.threadless.com/"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-16"><!----> T-Shirts and Hoodies </h3></a><!----></div><!----><!----></app-menu-item><app-menu-item _ngcontent-nid-c11="" class="nav-item ng-tns-c10-17 ng-star-inserted" _nghost-nid-c10=""><div _ngcontent-nid-c10="" class="heading ng-tns-c10-17 ng-star-inserted"><a _ngcontent-nid-c10="" routerlinkactive="active" class="ng-tns-c10-17 ng-star-inserted" href="https://docs.nestjs.com/support"><h3 _ngcontent-nid-c10="" class="ng-tns-c10-17"><!----> Support us </h3></a><!----><!----></div><!----><!----></app-menu-item><!----><a _ngcontent-nid-c11="" href="https://enterprise.nestjs.com/" target="_blank" title="Enterprise | NestJS - A node.js framework built on top of TypeScript" class="btn btn-support">Get enterprise support</a><a _ngcontent-nid-c11="" href="https://docs.nestjs.com/v7" class="btn btn-version">Version 7</a></nav><div class="ps__rail-x" style="left: 0px; bottom: 0px;"><div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div></div><div class="ps__rail-y" style="top: 0px; right: 0px; height: 643px;"><div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 327px;"></div></div></app-menu><div class="container"><div class="page-wrapper"><app-toc _nghost-nid-c12=""><div _ngcontent-nid-c12="" perfectscrollbar="" class="toc-wrapper ps ps--active-y"><ul _ngcontent-nid-c12=""><li _ngcontent-nid-c12="" class="current ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#database"> Database </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#typeorm-integration"> TypeORM Integration </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#repository-pattern"> Repository pattern </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#relations"> Relations </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#auto-load-entities"> Auto-load entities </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#separating-entity-definition"> Separating entity definition </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#transactions"> Transactions </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#subscribers"> Subscribers </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#migrations"> Migrations </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#multiple-databases"> Multiple databases </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#testing"> Testing </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#custom-repository"> Custom repository </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#async-configuration"> Async configuration </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#custom-connection-factory"> Custom Connection Factory </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#example"> Example </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#sequelize-integration"> Sequelize Integration </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#models"> Models </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#relations-1"> Relations </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#auto-load-models"> Auto-load models </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#transactions-1"> Transactions </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#migrations-1"> Migrations </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#multiple-databases-1"> Multiple databases </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#testing-1"> Testing </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#async-configuration-1"> Async configuration </a></li><li _ngcontent-nid-c12="" class="ng-star-inserted"><a _ngcontent-nid-c12="" href="https://docs.nestjs.com/techniques/database#example-1"> Example </a></li><!----></ul><div class="ps__rail-x" style="left: 0px; bottom: 0px;"><div class="ps__thumb-x" tabindex="0" style="left: 0px; width: 0px;"></div></div><div class="ps__rail-y" style="top: 0px; height: 293px; right: 0px;"><div class="ps__thumb-y" tabindex="0" style="top: 0px; height: 110px;"></div></div></div></app-toc><router-outlet></router-outlet><app-sql class="ng-star-inserted"><div class="content"><div class="carbon-wrapper"><script type="text/javascript" src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/carbon.js" id="_carbonads_js"></script><div id="carbonads"><span><span class="carbon-wrap"><a href="https://srv.carbonads.net/ads/click/x/GTND42JICEBIC2Q7CVBLYKQNCKBDVK3ICK7D6Z3JCY7IVK7YCWAIEK3KF6AIVK7NCA7IV2JWCKAILK7IFT7IC2QKC6SDC23MCYAI6K3EHJNCLSIZ?segment=placement:nestjscom;" class="carbon-img" target="_blank" rel="noopener sponsored"><img src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/1628789001-carbon-ads-platform-v3.png" alt="ads via Carbon" style="max-width: 130px;" width="130" height="100" border="0"></a><a href="https://srv.carbonads.net/ads/click/x/GTND42JICEBIC2Q7CVBLYKQNCKBDVK3ICK7D6Z3JCY7IVK7YCWAIEK3KF6AIVK7NCA7IV2JWCKAILK7IFT7IC2QKC6SDC23MCYAI6K3EHJNCLSIZ?segment=placement:nestjscom;" class="carbon-text" target="_blank" rel="noopener sponsored">Shift left with the codified cloud security platform for developers. Try for free.</a></span><a href="http://carbonads.net/?utm_source=nestjscom&amp;utm_medium=ad_via_link&amp;utm_campaign=in_unit&amp;utm_term=carbon" class="carbon-poweredby" target="_blank" rel="noopener sponsored">ads via Carbon</a></span></div></div><div class="github-links"><a href="https://github.com/nestjs/docs.nestjs.com/edit/master/content/techniques/sql.md" aria-label="Suggest Edits" title="Suggest Edits"><svg class="svg-inline--fa fa-edit fa-w-18" aria-hidden="true" data-prefix="fas" data-icon="edit" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512" data-fa-i2svg=""><path fill="currentColor" d="M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"></path></svg><!-- <i class="fas fa-edit"></i> --></a></div><h3 id="database">Database</h3><p>Nest
 is database agnostic, allowing you to easily integrate with any SQL or 
NoSQL database. You have a number of options available to you, depending
 on your preferences. At the most general level, connecting Nest to a 
database is simply a matter of loading an appropriate Node.js driver for
 the database, just as you would with <a rel="nofollow" target="_blank" href="https://expressjs.com/en/guide/database-integration.html">Express</a> or Fastify.</p><p>You can also directly use any general purpose Node.js database integration <strong>library</strong> or ORM, such as <a rel="nofollow" target="_blank" href="https://mikro-orm.io/">MikroORM</a> also check the <a routerlink="/recipe/mikroorm" href="https://docs.nestjs.com/recipe/mikroorm">recipe here</a>, <a rel="nofollow" target="_blank" href="https://sequelize.org/">Sequelize</a> (navigate to the <a href="https://docs.nestjs.com/techniques/database#sequelize-integration">Sequelize integration</a> section), <a rel="nofollow" target="_blank" href="https://knexjs.org/">Knex.js</a> (<a rel="nofollow" target="_blank" href="https://dev.to/nestjs/build-a-nestjs-module-for-knex-js-or-other-resource-based-libraries-in-5-minutes-12an">tutorial</a>), <a rel="nofollow" target="_blank" href="https://github.com/typeorm/typeorm">TypeORM</a>, and <a rel="nofollow" target="_blank" href="https://www.github.com/prisma/prisma">Prisma</a> (<a routerlink="/recipes/prisma" href="https://docs.nestjs.com/recipes/prisma">recipe</a>) , to operate at a higher level of abstraction.</p><p>For convenience, Nest provides tight integration with TypeORM and Sequelize out-of-the-box with the <code>@nestjs/typeorm</code> and <code>@nestjs/sequelize</code> packages respectively, which we'll cover in the current chapter, and Mongoose with <code>@nestjs/mongoose</code>, which is covered in <a routerlink="/techniques/mongodb" href="https://docs.nestjs.com/techniques/mongodb">this chapter</a>.
 These integrations provide additional NestJS-specific features, such as
 model/repository injection, testability, and asynchronous configuration
 to make accessing your chosen database even easier.</p><h3 id="typeorm-integration">TypeORM Integration</h3><p>For integrating with SQL and NoSQL databases, Nest provides the <code>@nestjs/typeorm</code> package. Nest uses <a rel="nofollow" target="_blank" href="https://github.com/typeorm/typeorm">TypeORM</a>
 because it's the most mature Object Relational Mapper (ORM) available 
for TypeScript. Since it's written in TypeScript, it integrates well 
with the Nest framework.</p><p>To begin using it, we first install the required dependencies. In this chapter, we'll demonstrate using the popular <a rel="nofollow" target="_blank" href="https://www.mysql.com/">MySQL</a>
 Relational DBMS, but TypeORM provides support for many relational 
databases, such as PostgreSQL, Oracle, Microsoft SQL Server, SQLite, and
 even NoSQL databases like MongoDB. The procedure we walk through in 
this chapter will be the same for any database supported by TypeORM. 
You'll simply need to install the associated client API libraries for 
your selected database.</p><pre class=" language-bash" tabindex="0"><code class=" language-bash">
$ npm install --save @nestjs/typeorm typeorm mysql2
</code></pre><p>Once the installation process is complete, we can import the <code>TypeOrmModule</code> into the root <code>AppModule</code>.</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
      entities<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><blockquote class="warning"><strong>Warning</strong> Setting <code>synchronize: true</code> shouldn't be used in production - otherwise you can lose production data.
</blockquote><p>The <code>forRoot()</code> method supports all the configuration properties exposed by the <code>createConnection()</code> function from the <a rel="nofollow" target="_blank" href="https://typeorm.io/#/connection-options">TypeORM</a> package. In addition, there are several extra configuration properties described below.</p><table><tr><td><code>retryAttempts</code></td><td>Number of attempts to connect to the database (default: <code>10</code>)</td></tr><tr><td><code>retryDelay</code></td><td>Delay between connection retry attempts (ms) (default: <code>3000</code>)</td></tr><tr><td><code>autoLoadEntities</code></td><td>If <code>true</code>, entities will be loaded automatically (default: <code>false</code>)</td></tr><tr><td><code>keepConnectionAlive</code></td><td>If <code>true</code>, connection will not be closed on application shutdown (default: <code>false</code>)</td></tr></table><blockquote class="info"><strong>Hint</strong> Learn more about the connection options <a rel="nofollow" target="_blank" href="https://typeorm.io/#/connection-options">here</a>.
</blockquote><p>Alternatively, rather than passing a configuration object to <code>forRoot()</code>, we can create an <code>ormconfig.json</code> file in the project root directory.</p><pre class=" language-json" tabindex="0"><code class=" language-json">
<span class="token punctuation">{</span>
  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"mysql"</span><span class="token punctuation">,</span>
  <span class="token property">"host"</span><span class="token operator">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>
  <span class="token property">"port"</span><span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
  <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>
  <span class="token property">"password"</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>
  <span class="token property">"database"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>
  <span class="token property">"entities"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dist/**/*.entity{.ts,.js}"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"synchronize"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><p>Then, we can call <code>forRoot()</code> without any options:</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><blockquote class="warning"><strong>Warning</strong> Static glob paths (e.g., <code>dist/**/*.entity{ .ts,.js}</code>) won't work properly with <a rel="nofollow" target="_blank" href="https://webpack.js.org/">webpack</a>.
</blockquote><blockquote class="info"><strong>Hint</strong> Note that the <code>ormconfig.json</code> file is loaded by the <code>typeorm</code> library. Thus, any of the extra properties described above (which are supported internally by way of the <code>forRoot()</code> method - for example, <code>autoLoadEntities</code> and <code>retryDelay</code>) won't be applied. Luckily, TypeORM provides the <a rel="nofollow" target="_blank" href="https://typeorm.io/#/using-ormconfig/overriding-options-defined-in-ormconfig"><code>getConnectionOptions</code></a> function that reads connection options from the <code>ormconfig</code> file or environment variables. With this, you can still use the configuration file and set Nest-specific options, as follows:
<pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">getConnectionOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      autoLoadEntities<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></blockquote><p>Once this is done, the TypeORM <code>Connection</code> and <code>EntityManager</code> objects will be available to inject across the entire project (without needing to import any modules), for example:</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Connection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UsersModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> connection<span class="token operator">:</span> Connection<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><pre class="hide language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Connection <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Dependencies</span></span><span class="token punctuation">(</span>Connection<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UsersModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>connection <span class="token operator">=</span> connection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="repository-pattern"><span>Repository pattern</span><a href="https://docs.nestjs.com/techniques/database#repository-pattern">#</a></h4><p><a rel="nofollow" target="_blank" href="https://github.com/typeorm/typeorm">TypeORM</a> supports the <strong>repository design pattern</strong>, so each entity has its own repository. These repositories can be obtained from the database connection.</p><p>To continue the example, we need at least one entity. Let's define the <code>User</code> entity.</p><span class="filename"> user.entity.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  isActive<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> Learn more about entities&nbsp;in the <a rel="nofollow" target="_blank" href="https://typeorm.io/#/entities">TypeORM documentation</a>.
</blockquote><p>The <code>User</code> entity file sits in the <code>users</code> directory. This directory contains all files related to the <code>UsersModule</code>. You can decide where to keep your model files, however, we recommend creating them near their <strong>domain</strong>, in the corresponding module directory.</p><p>To begin using the <code>User</code> entity, we need to let TypeORM know about it by inserting it into the <code>entities</code> array in the module <code>forRoot()</code> method options (unless you use a static glob path):</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users/user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
      entities<span class="token operator">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">,</span>
      synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Next, let's look at the <code>UsersModule</code>:</p><span class="filename"> users.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.service'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.controller'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersController<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>This module uses the <code>forFeature()</code> method to define which repositories are registered in the current scope. With that in place, we can inject the <code>UsersRepository</code> into the <code>UsersService</code> using the <code>@InjectRepository()</code> decorator:</p><span class="filename"> users.service.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectRepository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectRepository</span></span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>
    <span class="token keyword">private</span> usersRepository<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><pre class="hide language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> Dependencies <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getRepositoryToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Dependencies</span></span><span class="token punctuation">(</span><span class="token function">getRepositoryToken</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>usersRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository <span class="token operator">=</span> usersRepository<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="warning"><strong>Notice</strong> Don't forget to import the <code>UsersModule</code> into the root <code>AppModule</code>.
</blockquote><p>If you want to use the repository outside of the module which imports <code>TypeOrmModule.forFeature</code>, you'll need to re-export the providers generated by it.
You can do this by exporting the whole module, like this:</p><span class="filename"> users.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Now if we import <code>UsersModule</code> in <code>UserHttpModule</code>, we can use <code>@InjectRepository(User)</code> in the providers of the latter module.</p><span class="filename"> users-http.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.module'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.service'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.controller'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>UsersModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersController<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserHttpModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="relations"><span>Relations</span><a href="https://docs.nestjs.com/techniques/database#relations">#</a></h4><p>Relations
 are associations established between two or more tables. Relations are 
based on common fields from each table, often involving primary and 
foreign keys.</p><p>There are three types of relations:</p><table><tr><td><code>One-to-one</code></td><td>Every row in the primary table has one and only one associated row in the foreign table. Use the <code>@OneToOne()</code> decorator to define this type of relation.</td></tr><tr><td><code>One-to-many / Many-to-one</code></td><td>Every row in the primary table has one or more related rows in the foreign table. Use the <code>@OneToMany()</code> and <code>@ManyToOne()</code> decorators to define this type of relation.</td></tr><tr><td><code>Many-to-many</code></td><td>Every
 row in the primary table has many related rows in the foreign table, 
and every record in the foreign table has many related rows in the 
primary table. Use the <code>@ManyToMany()</code> decorator to define this type of relation.</td></tr></table><p>To define relations in entities, use the corresponding <strong>decorators</strong>. For example, to define that each <code>User</code> can have multiple photos, use the <code>@OneToMany()</code> decorator.</p><span class="filename"> user.entity.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Entity<span class="token punctuation">,</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> OneToMany <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Photo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../photos/photo.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  isActive<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">OneToMany</span></span><span class="token punctuation">(</span>type <span class="token operator">=&gt;</span> Photo<span class="token punctuation">,</span> photo <span class="token operator">=&gt;</span> photo<span class="token punctuation">.</span>user<span class="token punctuation">)</span>
  photos<span class="token operator">:</span> Photo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> To learn more about relations in TypeORM, visit the <a rel="nofollow" target="_blank" href="https://typeorm.io/#/relations">TypeORM documentation</a>.
</blockquote><h4 appanchor="" id="auto-load-entities"><span>Auto-load entities</span><a href="https://docs.nestjs.com/techniques/database#auto-load-entities">#</a></h4><p>Manually adding entities to the <code>entities</code>
 array of the connection options can be tedious. In addition, 
referencing entities from the root module breaks application domain 
boundaries and causes leaking implementation details to other parts of 
the application. To solve this issue, static glob paths can be used 
(e.g., <code>dist/**/*.entity{ .ts,.js}</code>).</p><p>Note, however, 
that glob paths are not supported by webpack, so if you are building 
your application within a monorepo, you won't be able to use them. To 
address this issue, an alternative solution is provided. To 
automatically load entities, set the <code>autoLoadEntities</code> property of the configuration object (passed into the <code>forRoot()</code> method) to <code>true</code>, as shown below:</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>
      autoLoadEntities<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>With that option specified, every entity registered through the <code>forFeature()</code> method will be automatically added to the <code>entities</code> array of the configuration object.</p><blockquote class="warning"><strong>Warning</strong> Note that entities that aren't registered through the <code>forFeature()</code> method, but are only referenced from the entity (via a relationship), won't be included by way of the <code>autoLoadEntities</code> setting.
</blockquote><h4 appanchor="" id="separating-entity-definition"><span>Separating entity definition</span><a href="https://docs.nestjs.com/techniques/database#separating-entity-definition">#</a></h4><p>You
 can define an entity and its columns right in the model, using 
decorators. But some people prefer to define entities and their columns 
inside separate files using the <a rel="nofollow" target="_blank" href="https://typeorm.io/#/separating-entity-definition">"entity schemas"</a>.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> EntitySchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> UserSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EntitySchema<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">'User'</span><span class="token punctuation">,</span>
  target<span class="token operator">:</span> User<span class="token punctuation">,</span>
  columns<span class="token operator">:</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> Number<span class="token punctuation">,</span>
      primary<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      generated<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    firstName<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    isActive<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  relations<span class="token operator">:</span> <span class="token punctuation">{</span>
    photos<span class="token operator">:</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">'one-to-many'</span><span class="token punctuation">,</span>
      target<span class="token operator">:</span> <span class="token string">'Photo'</span><span class="token punctuation">,</span> <span class="token comment">// the name of the PhotoSchema</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><blockquote class="warning error"><strong>Warning</strong> If you provide the <code>target</code> option, the <code>name</code> option value has to be the same as the name of the target class.
If you do not provide the <code>target</code> you can use any name.
</blockquote><p>Nest allows you to use an <code>EntitySchema</code> instance wherever an <code>Entity</code> is expected, for example:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.schema'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.controller'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.service'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>UserSchema<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersController<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="transactions"><span>Transactions</span><a href="https://docs.nestjs.com/techniques/database#transactions">#</a></h4><p>A
 database transaction symbolizes a unit of work performed within a 
database management system against a database, and treated in a coherent
 and reliable way independent of other transactions. A transaction 
generally represents any change in a database (<a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Database_transaction">learn more</a>).</p><p>There are many different strategies to handle <a rel="nofollow" target="_blank" href="https://typeorm.io/#/transactions">TypeORM transactions</a>. We recommend using the <code>QueryRunner</code> class because it gives full control over the transaction.</p><p>First, we need to inject the <code>Connection</code> object into a class in the normal way:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> connection<span class="token operator">:</span> Connection<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> The <code>Connection</code> class is imported from the <code>typeorm</code> package.
</blockquote><p>Now, we can use this object to create a transaction.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">async</span> <span class="token function">createMany</span><span class="token punctuation">(</span>users<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryRunner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">createQueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">startTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span>manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// since we have errors lets rollback the changes we made</span>
    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">rollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// you need to release a queryRunner which was manually instantiated</span>
    <span class="token keyword">await</span> queryRunner<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> Note that the <code>connection</code> is used only to create the <code>QueryRunner</code>. However, to test this class would require mocking the entire <code>Connection</code> object (which exposes several methods). Thus, we recommend using a helper factory class (e.g., <code>QueryRunnerFactory</code>)
 and defining an interface with a limited set of methods required to 
maintain transactions. This technique makes mocking these methods pretty
 straightforward.
</blockquote><p>Alternatively, you can use the callback-style approach with the <code>transaction</code> method of the <code>Connection</code> object (<a rel="nofollow" target="_blank" href="https://typeorm.io/#/transactions/creating-and-using-transactions">read more</a>).</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">async</span> <span class="token function">createMany</span><span class="token punctuation">(</span>users<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> manager <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> manager<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>users<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>Using decorators to control the transaction (<code>@Transaction()</code> and <code>@TransactionManager()</code>) is not recommended.</p><p><app-banner-shop _nghost-nid-c23=""><div _ngcontent-nid-c23="" class="banner"><h2 _ngcontent-nid-c23="">Hoodies, <span _ngcontent-nid-c23="">T-shirts</span>, and accessories!</h2><p _ngcontent-nid-c23=""> Support our future development by shopping in the official store! </p><a _ngcontent-nid-c23="" href="https://nestjs.threadless.com/" target="_blank" title="Shop | NestJS - A node.js framework built on top of TypeScript" class="btn-more">See more</a></div></app-banner-shop></p><h4 appanchor="" id="subscribers"><span>Subscribers</span><a href="https://docs.nestjs.com/techniques/database#subscribers">#</a></h4><p>With TypeORM <a rel="nofollow" target="_blank" href="https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber">subscribers</a>, you can listen to specific entity events.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  Connection<span class="token punctuation">,</span>
  EntitySubscriberInterface<span class="token punctuation">,</span>
  EventSubscriber<span class="token punctuation">,</span>
  InsertEvent<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">EventSubscriber</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserSubscriber</span> <span class="token keyword">implements</span> <span class="token class-name">EntitySubscriberInterface<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>connection<span class="token operator">:</span> Connection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    connection<span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">listenTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> User<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">beforeInsert</span><span class="token punctuation">(</span>event<span class="token operator">:</span> InsertEvent<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">BEFORE USER INSERTED: </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="error"><strong>Warning</strong> Event subscribers can not be <a routerlink="/fundamentals/injection-scopes" href="https://docs.nestjs.com/fundamentals/injection-scopes">request-scoped</a>.
</blockquote><p>Now, add the <code>UserSubscriber</code> class to the <code>providers</code> array:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/typeorm'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.controller'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.service'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UserSubscriber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.subscriber'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersService<span class="token punctuation">,</span> UserSubscriber<span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersController<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> Learn more about entity subscribers <a rel="nofollow" target="_blank" href="https://typeorm.io/#/listeners-and-subscribers/what-is-a-subscriber">here</a>.
</blockquote><h4 appanchor="" id="migrations"><span>Migrations</span><a href="https://docs.nestjs.com/techniques/database#migrations">#</a></h4><p><a rel="nofollow" target="_blank" href="https://typeorm.io/#/migrations">Migrations</a>
 provide a way to incrementally update the database schema to keep it in
 sync with the application's data model while preserving existing data 
in the database. To generate, run, and revert migrations, TypeORM 
provides a dedicated <a rel="nofollow" target="_blank" href="https://typeorm.io/#/migrations/creating-a-new-migration">CLI</a>.</p><p>Migration
 classes are separate from the Nest application source code. Their 
lifecycle is maintained by the TypeORM CLI. Therefore, you are not able 
to leverage dependency injection and other Nest specific features with 
migrations. To learn more about migrations, follow the guide in the <a rel="nofollow" target="_blank" href="https://typeorm.io/#/migrations/creating-a-new-migration">TypeORM documentation</a>.</p><h4 appanchor="" id="multiple-databases"><span>Multiple databases</span><a href="https://docs.nestjs.com/techniques/database#multiple-databases">#</a></h4><p>Some
 projects require multiple database connections. This can also be 
achieved with this module. To work with multiple connections, first 
create the connections. In this case, connection naming becomes <strong>mandatory</strong>.</p><p>Suppose you have an <code>Album</code> entity stored in its own database.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">5432</span><span class="token punctuation">,</span>
  username<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> <span class="token string">'db'</span><span class="token punctuation">,</span>
  synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'user_db_host'</span><span class="token punctuation">,</span>
      entities<span class="token operator">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">'albumsConnection'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'album_db_host'</span><span class="token punctuation">,</span>
      entities<span class="token operator">:</span> <span class="token punctuation">[</span>Album<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><blockquote class="warning"><strong>Notice</strong> If you don't set the <code>name</code> for a connection, its name is set to <code>default</code>.
 Please note that you shouldn't have multiple connections without a 
name, or with the same name, otherwise they will get overridden.
</blockquote><p>At this point, you have <code>User</code> and <code>Album</code> entities registered with their own connection. With this setup, you have to tell the <code>TypeOrmModule.forFeature()</code> method and the <code>@InjectRepository()</code> decorator which connection should be used. If you do not pass any connection name, the <code>default</code> connection is used.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Album<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'albumsConnection'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>You can also inject the <code>Connection</code> or <code>EntityManager</code> for a given connection:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumsService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectConnection</span></span><span class="token punctuation">(</span><span class="token string">'albumsConnection'</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> connection<span class="token operator">:</span> Connection<span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectEntityManager</span></span><span class="token punctuation">(</span><span class="token string">'albumsConnection'</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> entityManager<span class="token operator">:</span> EntityManager<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>It's also possible to inject any <code>Connection</code> to the providers:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      provide<span class="token operator">:</span> AlbumsService<span class="token punctuation">,</span>
      <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>albumsConnection<span class="token operator">:</span> Connection<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AlbumsService</span><span class="token punctuation">(</span>albumsConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      inject<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">getConnectionToken</span><span class="token punctuation">(</span><span class="token string">'albumsConnection'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumsModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="testing"><span>Testing</span><a href="https://docs.nestjs.com/techniques/database#testing">#</a></h4><p>When
 it comes to unit testing an application, we usually want to avoid 
making a database connection, keeping our test suites independent and 
their execution process as fast as possible. But our classes might 
depend on repositories that are pulled from the connection instance. How
 do we handle that? The solution is to create mock repositories. In 
order to achieve that, we set up <a routerlink="/fundamentals/custom-providers" href="https://docs.nestjs.com/fundamentals/custom-providers">custom providers</a>. Each registered repository is automatically represented by an <code>&lt;EntityName&gt;Repository</code> token, where <code>EntityName</code> is the name of your entity class.</p><p>The <code>@nestjs/typeorm</code> package exposes the <code>getRepositoryToken()</code> function which returns a prepared token based on a given entity.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>
    UsersService<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      provide<span class="token operator">:</span> <span class="token function">getRepositoryToken</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">,</span>
      useValue<span class="token operator">:</span> mockRepository<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Now a substitute <code>mockRepository</code> will be used as the <code>UsersRepository</code>. Whenever any class asks for <code>UsersRepository</code> using an <code>@InjectRepository()</code> decorator, Nest will use the registered <code>mockRepository</code> object.</p><h4 appanchor="" id="custom-repository"><span>Custom repository</span><a href="https://docs.nestjs.com/techniques/database#custom-repository">#</a></h4><p>TypeORM provides a feature called <strong>custom repositories</strong>.
 Custom repositories allow you to extend a base repository class, and 
enrich it with several special methods. To learn more about this 
feature, visit <a rel="nofollow" target="_blank" href="https://typeorm.io/#/custom-repository">this page</a>.</p><p>In order to create your custom repository, use the <code>@EntityRepository()</code> decorator and extend the <code>Repository</code> class.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">EntityRepository</span></span><span class="token punctuation">(</span>Author<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthorRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository<span class="token operator">&lt;</span>Author<span class="token operator">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> Both <code>@EntityRepository()</code> and <code>Repository</code> are imported from the <code>typeorm</code> package.
</blockquote><p>Once the class is created, the next step is to delegate instantiation responsibility to Nest. For this, we have to pass the<code>AuthorRepository</code> class to the <code>TypeOrm.forFeature()</code> method.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>AuthorRepository<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  controller<span class="token operator">:</span> <span class="token punctuation">[</span>AuthorController<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AuthorService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthorModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Afterward, simply inject the repository using the following construction:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AuthorService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> authorRepository<span class="token operator">:</span> AuthorRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="async-configuration"><span>Async configuration</span><a href="https://docs.nestjs.com/techniques/database#async-configuration">#</a></h4><p>You may want to pass your repository module options asynchronously instead of statically. In this case, use the <code>forRootAsync()</code> method, which provides several ways to deal with async configuration.</p><p>One approach is to use a factory function:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
    host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
    database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
    entities<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">'/**/*.entity{.ts,.js}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Our factory behaves like any other <a rel="nofollow" target="_blank" href="https://docs.nestjs.com/fundamentals/async-providers">asynchronous provider</a> (e.g., it can be <code>async</code> and it's able to inject dependencies through <code>inject</code>).</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
    host<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'HOST'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token operator">+</span>configService<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">'PORT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'USERNAME'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'PASSWORD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    database<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'DATABASE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    entities<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">'/**/*.entity{.ts,.js}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  inject<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Alternatively, you can use the <code>useClass</code> syntax:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  useClass<span class="token operator">:</span> TypeOrmConfigService<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>The construction above will instantiate <code>TypeOrmConfigService</code> inside <code>TypeOrmModule</code> and use it to provide an options object by calling <code>createTypeOrmOptions()</code>. Note that this means that the <code>TypeOrmConfigService</code> has to implement the <code>TypeOrmOptionsFactory</code> interface, as shown below:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">TypeOrmConfigService</span> <span class="token keyword">implements</span> <span class="token class-name">TypeOrmOptionsFactory</span> <span class="token punctuation">{</span>
  <span class="token function">createTypeOrmOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> TypeOrmModuleOptions <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      type<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
      entities<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">'/**/*.entity{.ts,.js}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>In order to prevent the creation of <code>TypeOrmConfigService</code> inside <code>TypeOrmModule</code> and use a provider imported from a different module, you can use the <code>useExisting</code> syntax.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  useExisting<span class="token operator">:</span> ConfigService<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>This construction works the same as <code>useClass</code> with one critical difference - <code>TypeOrmModule</code> will lookup imported modules to reuse an existing <code>ConfigService</code> instead of instantiating a new one.</p><blockquote class="info"><strong>Hint</strong> Make sure that the <code>name</code> property is defined at the same level as the <code>useFactory</code>, <code>useClass</code>, or <code>useValue</code> property. This will allow Nest to properly register the connection under the appropriate injection token.
</blockquote><h4 appanchor="" id="custom-connection-factory"><span>Custom Connection Factory</span><a href="https://docs.nestjs.com/techniques/database#custom-connection-factory">#</a></h4><p>In conjunction with async configuration using <code>useFactory</code>, <code>useClass</code>, or <code>useExisting</code>, you can optionally specify a <code>connectionFactory</code> function which will allow you to provide your own TypeORM connection rather than allowing <code>TypeOrmModule</code> to create the connection.</p><p><code>connectionFactory</code> receives the TypeORM <code>ConnectionOptions</code> configured during async configuration using <code>useFactory</code>, <code>useClass</code>, or <code>useExisting</code> and returns a <code>Promise</code> that resolves a TypeORM <code>Connection</code>.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  inject<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// Use useFactory, useClass, or useExisting</span>
  <span class="token comment">// to configure the ConnectionOptions.</span>
  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
    host<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'HOST'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token operator">+</span>configService<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">'PORT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'USERNAME'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'PASSWORD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    database<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'DATABASE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    entities<span class="token operator">:</span> <span class="token punctuation">[</span>__dirname <span class="token operator">+</span> <span class="token string">'/**/*.entity{.ts,.js}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// connectionFactory receives the configured ConnectionOptions</span>
  <span class="token comment">// and returns a Promise&lt;Connection&gt;.</span>
  <span class="token function-variable function">connectionFactory</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createConnection</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><blockquote class="info"><strong>Hint</strong> The <code>createConnection</code> function is imported from the <code>typeorm</code> package.
</blockquote><h4 appanchor="" id="example"><span>Example</span><a href="https://docs.nestjs.com/techniques/database#example">#</a></h4><p>A working example is available <a rel="nofollow" target="_blank" href="https://github.com/nestjs/nest/tree/master/sample/05-sql-typeorm">here</a>.</p><p><app-banner-enterprise _nghost-nid-c22=""><div _ngcontent-nid-c22="" class="banner"><h2 _ngcontent-nid-c22="">Official <span _ngcontent-nid-c22="">enterprise</span> support</h2><ul _ngcontent-nid-c22=""><li _ngcontent-nid-c22=""><span _ngcontent-nid-c22=""><svg _ngcontent-nid-c22="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c22="" class="fas fa-check"></i> --></span> Providing technical guidance </li><li _ngcontent-nid-c22=""><span _ngcontent-nid-c22=""><svg _ngcontent-nid-c22="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c22="" class="fas fa-check"></i> --></span> Performing in-depth code reviews </li><li _ngcontent-nid-c22=""><span _ngcontent-nid-c22=""><svg _ngcontent-nid-c22="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c22="" class="fas fa-check"></i> --></span> Mentoring team members </li><li _ngcontent-nid-c22=""><span _ngcontent-nid-c22=""><svg _ngcontent-nid-c22="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c22="" class="fas fa-check"></i> --></span> Advising best practices </li></ul><a _ngcontent-nid-c22="" href="https://enterprise.nestjs.com/" target="_blank" title="Enterprise | NestJS - A progressive Node.js framework" class="btn-more">Explore more</a></div></app-banner-enterprise></p><h3 id="sequelize-integration">Sequelize Integration</h3><p>An alternative to using TypeORM is to use the <a rel="nofollow" target="_blank" href="https://sequelize.org/">Sequelize</a> ORM with the <code>@nestjs/sequelize</code> package. In addition, we leverage the <a rel="nofollow" target="_blank" href="https://github.com/RobinBuschmann/sequelize-typescript">sequelize-typescript</a> package which provides a set of additional decorators to declaratively define entities.</p><p>To begin using it, we first install the required dependencies. In this chapter, we'll demonstrate using the popular <a rel="nofollow" target="_blank" href="https://www.mysql.com/">MySQL</a>
 Relational DBMS, but Sequelize provides support for many relational 
databases, such as PostgreSQL, MySQL, Microsoft SQL Server, SQLite, and 
MariaDB. The procedure we walk through in this chapter will be the same 
for any database supported by Sequelize. You'll simply need to install 
the associated client API libraries for your selected database.</p><pre class=" language-bash" tabindex="0"><code class=" language-bash">
$ npm install --save @nestjs/sequelize sequelize sequelize-typescript mysql2
$ npm install --save-dev @types/sequelize
</code></pre><p>Once the installation process is complete, we can import the <code>SequelizeModule</code> into the root <code>AppModule</code>.</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SequelizeModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      dialect<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
      models<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>The <code>forRoot()</code> method supports all the configuration properties exposed by the Sequelize constructor (<a rel="nofollow" target="_blank" href="https://sequelize.org/v5/manual/getting-started.html#setting-up-a-connection">read more</a>). In addition, there are several extra configuration properties described below.</p><table><tr><td><code>retryAttempts</code></td><td>Number of attempts to connect to the database (default: <code>10</code>)</td></tr><tr><td><code>retryDelay</code></td><td>Delay between connection retry attempts (ms) (default: <code>3000</code>)</td></tr><tr><td><code>autoLoadModels</code></td><td>If <code>true</code>, models will be loaded automatically (default: <code>false</code>)</td></tr><tr><td><code>keepConnectionAlive</code></td><td>If <code>true</code>, connection will not be closed on the application shutdown (default: <code>false</code>)</td></tr><tr><td><code>synchronize</code></td><td>If <code>true</code>, automatically loaded models will be synchronized (default: <code>true</code>)</td></tr></table><p>Once this is done, the <code>Sequelize</code> object will be available to inject across the entire project (without needing to import any modules), for example:</p><span class="filename"> app.service.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'sequelize-typescript'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> sequelize<span class="token operator">:</span> Sequelize<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><pre class="hide language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Sequelize <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'sequelize-typescript'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Dependencies</span></span><span class="token punctuation">(</span>Sequelize<span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>sequelize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sequelize <span class="token operator">=</span> sequelize<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="models"><span>Models</span><a href="https://docs.nestjs.com/techniques/database#models">#</a></h4><p>Sequelize
 implements the Active Record pattern. With this pattern, you use model 
classes directly to interact with the database. To continue the example,
 we need at least one model. Let's define the <code>User</code> model.</p><span class="filename"> user.model.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Column<span class="token punctuation">,</span> Model<span class="token punctuation">,</span> Table <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'sequelize-typescript'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Table</span></span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span>
  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span>
  lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> defaultValue<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  isActive<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> Learn more about the available decorators <a rel="nofollow" target="_blank" href="https://github.com/RobinBuschmann/sequelize-typescript#column">here</a>.
</blockquote><p>The <code>User</code> model file sits in the <code>users</code> directory. This directory contains all files related to the <code>UsersModule</code>. You can decide where to keep your model files, however, we recommend creating them near their <strong>domain</strong>, in the corresponding module directory.</p><p>To begin using the <code>User</code> model, we need to let Sequelize know about it by inserting it into the <code>models</code> array in the module <code>forRoot()</code> method options:</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SequelizeModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users/user.model'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      dialect<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
      models<span class="token operator">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Next, let's look at the <code>UsersModule</code>:</p><span class="filename"> users.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SequelizeModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.model'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.controller'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.service'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>SequelizeModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersController<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>This module uses the <code>forFeature()</code> method to define which models are registered in the current scope. With that in place, we can inject the <code>UserModel</code> into the <code>UsersService</code> using the <code>@InjectModel()</code> decorator:</p><span class="filename"> users.service.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.model'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectModel</span></span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>
    <span class="token keyword">private</span> userModel<span class="token operator">:</span> <span class="token keyword">typeof</span> User<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><pre class="hide language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> Dependencies <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getModelToken <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.model'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Dependencies</span></span><span class="token punctuation">(</span><span class="token function">getModelToken</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>usersRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>usersRepository <span class="token operator">=</span> usersRepository<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">async</span> <span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="warning"><strong>Notice</strong> Don't forget to import the <code>UsersModule</code> into the root <code>AppModule</code>.
</blockquote><p>If you want to use the repository outside of the module which imports <code>SequelizeModule.forFeature</code>, you'll need to re-export the providers generated by it.
You can do this by exporting the whole module, like this:</p><span class="filename"> users.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SequelizeModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./user.entity'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>SequelizeModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  exports<span class="token operator">:</span> <span class="token punctuation">[</span>SequelizeModule<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Now if we import <code>UsersModule</code> in <code>UserHttpModule</code>, we can use <code>@InjectModel(User)</code> in the providers of the latter module.</p><span class="filename"> users-http.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.module'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.service'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./users.controller'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>UsersModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersService<span class="token punctuation">]</span><span class="token punctuation">,</span>
  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersController<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserHttpModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="relations-1"><span>Relations</span><a href="https://docs.nestjs.com/techniques/database#relations-1">#</a></h4><p>Relations
 are associations established between two or more tables. Relations are 
based on common fields from each table, often involving primary and 
foreign keys.</p><p>There are three types of relations:</p><table><tr><td><code>One-to-one</code></td><td>Every row in the primary table has one and only one associated row in the foreign table</td></tr><tr><td><code>One-to-many / Many-to-one</code></td><td>Every row in the primary table has one or more related rows in the foreign table</td></tr><tr><td><code>Many-to-many</code></td><td>Every
 row in the primary table has many related rows in the foreign table, 
and every record in the foreign table has many related rows in the 
primary table</td></tr></table><p>To define relations in entities, use the corresponding <strong>decorators</strong>. For example, to define that each <code>User</code> can have multiple photos, use the <code>@HasMany()</code> decorator.</p><span class="filename"> user.entity.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Column<span class="token punctuation">,</span> Model<span class="token punctuation">,</span> Table<span class="token punctuation">,</span> HasMany <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'sequelize-typescript'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Photo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../photos/photo.model'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Table</span></span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span>
  firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span>
  lastName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> defaultValue<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  isActive<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">HasMany</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Photo<span class="token punctuation">)</span>
  photos<span class="token operator">:</span> Photo<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> To learn more about associations in Sequelize, read <a rel="nofollow" target="_blank" href="https://github.com/RobinBuschmann/sequelize-typescript#model-association">this</a> chapter.
</blockquote><h4 appanchor="" id="auto-load-models"><span>Auto-load models</span><a href="https://docs.nestjs.com/techniques/database#auto-load-models">#</a></h4><p>Manually adding models to the <code>models</code>
 array of the connection options can be tedious. In addition, 
referencing models from the root module breaks application domain 
boundaries and causes leaking implementation details to other parts of 
the application. To solve this issue, automatically load models by 
setting both <code>autoLoadModels</code> and <code>synchronize</code> properties of the configuration object (passed into the <code>forRoot()</code> method) to <code>true</code>, as shown below:</p><span class="filename"> app.module.ts
<app-tabs _nghost-nid-c18=""><div _ngcontent-nid-c18="" class="tabs-wrapper"><span _ngcontent-nid-c18="" class="tab"> JS </span><span _ngcontent-nid-c18="" class="tab active"> TS </span></div></app-tabs></span><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/common'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> SequelizeModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@nestjs/sequelize'</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>
      autoLoadModels<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>With that option specified, every model registered through the <code>forFeature()</code> method will be automatically added to the <code>models</code> array of the configuration object.</p><blockquote class="warning"><strong>Warning</strong> Note that models that aren't registered through the <code>forFeature()</code> method, but are only referenced from the model (via an association), won't be included.
</blockquote><h4 appanchor="" id="transactions-1"><span>Transactions</span><a href="https://docs.nestjs.com/techniques/database#transactions-1">#</a></h4><p>A
 database transaction symbolizes a unit of work performed within a 
database management system against a database, and treated in a coherent
 and reliable way independent of other transactions. A transaction 
generally represents any change in a database (<a rel="nofollow" target="_blank" href="https://en.wikipedia.org/wiki/Database_transaction">learn more</a>).</p><p>There are many different strategies to handle <a rel="nofollow" target="_blank" href="https://sequelize.org/v5/manual/transactions.html">Sequelize transactions</a>. Below is a sample implementation of a managed transaction (auto-callback).</p><p>First, we need to inject the <code>Sequelize</code> object into a class in the normal way:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> sequelize<span class="token operator">:</span> Sequelize<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> The <code>Sequelize</code> class is imported from the <code>sequelize-typescript</code> package.
</blockquote><p>Now, we can use this object to create a transaction.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">async</span> <span class="token function">createMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sequelize<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token keyword">async</span> t <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> transactionHost <span class="token operator">=</span> <span class="token punctuation">{</span> transaction<span class="token operator">:</span> t <span class="token punctuation">}</span><span class="token punctuation">;</span>

      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
          <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">'Abraham'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Lincoln'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          transactionHost<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>
          <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">'John'</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">'Boothe'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          transactionHost<span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Transaction has been rolled back</span>
    <span class="token comment">// err is whatever rejected the promise chain returned to the transaction callback</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote class="info"><strong>Hint</strong> Note that the <code>Sequelize</code> instance is used only to start the transaction. However, to test this class would require mocking the entire <code>Sequelize</code> object (which exposes several methods). Thus, we recommend using a helper factory class (e.g., <code>TransactionRunner</code>)
 and defining an interface with a limited set of methods required to 
maintain transactions. This technique makes mocking these methods pretty
 straightforward.
</blockquote><h4 appanchor="" id="migrations-1"><span>Migrations</span><a href="https://docs.nestjs.com/techniques/database#migrations-1">#</a></h4><p><a rel="nofollow" target="_blank" href="https://sequelize.org/v5/manual/migrations.html">Migrations</a>
 provide a way to incrementally update the database schema to keep it in
 sync with the application's data model while preserving existing data 
in the database. To generate, run, and revert migrations, Sequelize 
provides a dedicated <a rel="nofollow" target="_blank" href="https://sequelize.org/v5/manual/migrations.html#the-cli">CLI</a>.</p><p>Migration
 classes are separate from the Nest application source code. Their 
lifecycle is maintained by the Sequelize CLI. Therefore, you are not 
able to leverage dependency injection and other Nest specific features 
with migrations. To learn more about migrations, follow the guide in the
 <a rel="nofollow" target="_blank" href="https://sequelize.org/v5/manual/migrations.html#the-cli">Sequelize documentation</a>.</p><p><app-banner-courses _nghost-nid-c20=""><div _ngcontent-nid-c20="" class="banner"><h2 _ngcontent-nid-c20="">Learn the <span _ngcontent-nid-c20="">right</span> way!</h2><ul _ngcontent-nid-c20=""><li _ngcontent-nid-c20=""><span _ngcontent-nid-c20=""><svg _ngcontent-nid-c20="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c20="" class="fas fa-check"></i> --></span> 80+ chapters </li><li _ngcontent-nid-c20=""><span _ngcontent-nid-c20=""><svg _ngcontent-nid-c20="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c20="" class="fas fa-check"></i> --></span> 5+ hours of videos </li><li _ngcontent-nid-c20=""><span _ngcontent-nid-c20=""><svg _ngcontent-nid-c20="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c20="" class="fas fa-check"></i> --></span> Official certificate </li><li _ngcontent-nid-c20=""><span _ngcontent-nid-c20=""><svg _ngcontent-nid-c20="" class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fas" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i _ngcontent-nid-c20="" class="fas fa-check"></i> --></span> Deep-dive sessions </li></ul><a _ngcontent-nid-c20="" href="https://courses.nestjs.com/" target="_blank" title="Courses | NestJS - A node.js framework built on top of TypeScript" class="btn-more">Explore official courses</a></div></app-banner-courses></p><h4 appanchor="" id="multiple-databases-1"><span>Multiple databases</span><a href="https://docs.nestjs.com/techniques/database#multiple-databases-1">#</a></h4><p>Some
 projects require multiple database connections. This can also be 
achieved with this module. To work with multiple connections, first 
create the connections. In this case, connection naming becomes <strong>mandatory</strong>.</p><p>Suppose you have an <code>Album</code> entity stored in its own database.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token keyword">const</span> defaultOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  dialect<span class="token operator">:</span> <span class="token string">'postgres'</span><span class="token punctuation">,</span>
  port<span class="token operator">:</span> <span class="token number">5432</span><span class="token punctuation">,</span>
  username<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>
  password<span class="token operator">:</span> <span class="token string">'password'</span><span class="token punctuation">,</span>
  database<span class="token operator">:</span> <span class="token string">'db'</span><span class="token punctuation">,</span>
  synchronize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'user_db_host'</span><span class="token punctuation">,</span>
      models<span class="token operator">:</span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token operator">...</span>defaultOptions<span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">'albumsConnection'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'album_db_host'</span><span class="token punctuation">,</span>
      models<span class="token operator">:</span> <span class="token punctuation">[</span>Album<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><blockquote class="warning"><strong>Notice</strong> If you don't set the <code>name</code> for a connection, its name is set to <code>default</code>.
 Please note that you shouldn't have multiple connections without a 
name, or with the same name, otherwise they will get overridden.
</blockquote><p>At this point, you have <code>User</code> and <code>Album</code> models registered with their own connection. With this setup, you have to tell the <code>SequelizeModule.forFeature()</code> method and the <code>@InjectModel()</code> decorator which connection should be used. If you do not pass any connection name, the <code>default</code> connection is used.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    SequelizeModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Album<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'albumsConnection'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>You can also inject the <code>Sequelize</code> instance for a given connection:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumsService</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectConnection</span></span><span class="token punctuation">(</span><span class="token string">'albumsConnection'</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> sequelize<span class="token operator">:</span> Sequelize<span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>It's also possible to inject any <code>Sequelize</code> instance to the providers:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      provide<span class="token operator">:</span> AlbumsService<span class="token punctuation">,</span>
      <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>albumsSequelize<span class="token operator">:</span> Sequelize<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AlbumsService</span><span class="token punctuation">(</span>albumsSequelize<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      inject<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">getConnectionToken</span><span class="token punctuation">(</span><span class="token string">'albumsConnection'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AlbumsModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><h4 appanchor="" id="testing-1"><span>Testing</span><a href="https://docs.nestjs.com/techniques/database#testing-1">#</a></h4><p>When
 it comes to unit testing an application, we usually want to avoid 
making a database connection, keeping our test suites independent and 
their execution process as fast as possible. But our classes might 
depend on models that are pulled from the connection instance. How do we
 handle that? The solution is to create mock models. In order to achieve
 that, we set up <a routerlink="/fundamentals/custom-providers" href="https://docs.nestjs.com/fundamentals/custom-providers">custom providers</a>. Each registered model is automatically represented by a <code>&lt;ModelName&gt;Model</code> token, where <code>ModelName</code> is the name of your model class.</p><p>The <code>@nestjs/sequelize</code> package exposes the <code>getModelToken()</code> function which returns a prepared token based on a given model.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  providers<span class="token operator">:</span> <span class="token punctuation">[</span>
    UsersService<span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      provide<span class="token operator">:</span> <span class="token function">getModelToken</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">,</span>
      useValue<span class="token operator">:</span> mockModel<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><p>Now a substitute <code>mockModel</code> will be used as the <code>UserModel</code>. Whenever any class asks for <code>UserModel</code> using an <code>@InjectModel()</code> decorator, Nest will use the registered <code>mockModel</code> object.</p><h4 appanchor="" id="async-configuration-1"><span>Async configuration</span><a href="https://docs.nestjs.com/techniques/database#async-configuration-1">#</a></h4><p>You may want to pass your <code>SequelizeModule</code> options asynchronously instead of statically. In this case, use the <code>forRootAsync()</code> method, which provides several ways to deal with async configuration.</p><p>One approach is to use a factory function:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
SequelizeModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    dialect<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
    host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
    database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
    models<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Our factory behaves like any other <a rel="nofollow" target="_blank" href="https://docs.nestjs.com/fundamentals/async-providers">asynchronous provider</a> (e.g., it can be <code>async</code> and it's able to inject dependencies through <code>inject</code>).</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
SequelizeModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span>configService<span class="token operator">:</span> ConfigService<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    dialect<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
    host<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'HOST'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    port<span class="token operator">:</span> <span class="token operator">+</span>configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'PORT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'USERNAME'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'PASSWORD'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    database<span class="token operator">:</span> configService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'DATABASE'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    models<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  inject<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigService<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>Alternatively, you can use the <code>useClass</code> syntax:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
SequelizeModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  useClass<span class="token operator">:</span> SequelizeConfigService<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>The construction above will instantiate <code>SequelizeConfigService</code> inside <code>SequelizeModule</code> and use it to provide an options object by calling <code>createSequelizeOptions()</code>. Note that this means that the <code>SequelizeConfigService</code> has to implement the <code>SequelizeOptionsFactory</code> interface, as shown below:</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">SequelizeConfigService</span> <span class="token keyword">implements</span> <span class="token class-name">SequelizeOptionsFactory</span> <span class="token punctuation">{</span>
  <span class="token function">createSequelizeOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> SequelizeModuleOptions <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      dialect<span class="token operator">:</span> <span class="token string">'mysql'</span><span class="token punctuation">,</span>
      host<span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>
      port<span class="token operator">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>
      username<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      password<span class="token operator">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>
      database<span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>
      models<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>In order to prevent the creation of <code>SequelizeConfigService</code> inside <code>SequelizeModule</code> and use a provider imported from a different module, you can use the <code>useExisting</code> syntax.</p><pre class=" language-typescript" tabindex="0"><code class=" language-typescript">
SequelizeModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  imports<span class="token operator">:</span> <span class="token punctuation">[</span>ConfigModule<span class="token punctuation">]</span><span class="token punctuation">,</span>
  useExisting<span class="token operator">:</span> ConfigService<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>This construction works the same as <code>useClass</code> with one critical difference - <code>SequelizeModule</code> will lookup imported modules to reuse an existing <code>ConfigService</code> instead of instantiating a new one.</p><h4 appanchor="" id="example-1"><span>Example</span><a href="https://docs.nestjs.com/techniques/database#example-1">#</a></h4><p>A working example is available <a rel="nofollow" target="_blank" href="https://github.com/nestjs/nest/tree/master/sample/07-sequelize">here</a>.</p><script type="text/javascript" src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/docsearch.js" async=""></script></div></app-sql><!----></div><div class="sponsors-wrapper"><div class="sponsors-container"><h3>Support us</h3><p>
 Nest is an MIT-licensed open source project. It can grow thanks to the 
support by these awesome people. If you'd like to join them, please read
 more <a routerlink="/support" href="https://docs.nestjs.com/support">here</a>. </p><div class="row clearfix"><div class="inline-column"><h4 class="title">Principal Sponsors</h4><a href="https://github.com/Sanofi-IADC" target="_blank"><img src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/sanofi.png" alt="Sanofi Logo" class="logo-sponsor"></a><a href="https://trilon.io/" target="_blank"><img src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/trilon.svg" alt="Trilon Logo" class="logo-sponsor"></a></div><div class="inline-column"><h4 class="title">Sponsors / Partners</h4><a href="https://opencollective.com/nest" target="_blank" rel="nofollow" class="btn btn-primary"> Become a sponsor </a></div></div></div></div><app-newsletter _nghost-nid-c13=""><div _ngcontent-nid-c13="" class="newsletter-wrapper"><div _ngcontent-nid-c13="" class="signup"><div _ngcontent-nid-c13="" class="envelope-bg"><svg _ngcontent-nid-c13="" class="svg-inline--fa fa-envelope fa-w-16" aria-hidden="true" data-prefix="far" data-icon="envelope" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M464 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm0 48v40.805c-22.422 18.259-58.168 46.651-134.587 106.49-16.841 13.247-50.201 45.072-73.413 44.701-23.208.375-56.579-31.459-73.413-44.701C106.18 199.465 70.425 171.067 48 152.805V112h416zM48 400V214.398c22.914 18.251 55.409 43.862 104.938 82.646 21.857 17.205 60.134 55.186 103.062 54.955 42.717.231 80.509-37.199 103.053-54.947 49.528-38.783 82.032-64.401 104.947-82.653V400H48z"></path></svg><!-- <i _ngcontent-nid-c13="" class="far fa-envelope"></i> --></div><div _ngcontent-nid-c13="" class="hgroup"><h3 _ngcontent-nid-c13="">Join our Newsletter</h3><p _ngcontent-nid-c13=""> Subscribe to stay up to date with the latest Nest updates, features, and videos! </p></div><div _ngcontent-nid-c13="" class="newsletter-form"><form _ngcontent-nid-c13="" class="form-wrapper"><input _ngcontent-nid-c13="" id="newsletter-email" name="email" type="email" placeholder="Email address.." required="" class="form-control"><button _ngcontent-nid-c13="" type="submit" aria-label="Signup to Newsletter" class="signup-button"><svg _ngcontent-nid-c13="" class="svg-inline--fa fa-paper-plane fa-w-16" aria-hidden="true" data-prefix="far" data-icon="paper-plane" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M440 6.5L24 246.4c-34.4 19.9-31.1 70.8 5.7 85.9L144 379.6V464c0 46.4 59.2 65.5 86.6 28.6l43.8-59.1 111.9 46.2c5.9 2.4 12.1 3.6 18.3 3.6 8.2 0 16.3-2.1 23.6-6.2 12.8-7.2 21.6-20 23.9-34.5l59.4-387.2c6.1-40.1-36.9-68.8-71.5-48.9zM192 464v-64.6l36.6 15.1L192 464zm212.6-28.7l-153.8-63.5L391 169.5c10.7-15.5-9.5-33.5-23.7-21.2L155.8 332.6 48 288 464 48l-59.4 387.3z"></path></svg><!-- <i _ngcontent-nid-c13="" class="far fa-paper-plane"></i> --><svg _ngcontent-nid-c13="" class="svg-inline--fa fa-check-circle fa-w-16 icon-success" aria-hidden="true" data-prefix="fas" data-icon="check-circle" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"></path></svg><!-- <i _ngcontent-nid-c13="" class="icon-success fas fa-check-circle"></i> --></button></form></div></div></div></app-newsletter><app-footer _nghost-nid-c14=""><footer _ngcontent-nid-c14=""><div _ngcontent-nid-c14="" class="social-wrapper"><a _ngcontent-nid-c14="" title="Kamil Mysliwiec Facebook" href="https://www.facebook.com/kammysliwiec/" target="_blank"><svg _ngcontent-nid-c14="" class="svg-inline--fa fa-facebook fa-w-14" aria-hidden="true" data-prefix="fab" data-icon="facebook" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M448 56.7v398.5c0 13.7-11.1 24.7-24.7 24.7H309.1V306.5h58.2l8.7-67.6h-67v-43.2c0-19.6 5.4-32.9 33.5-32.9h35.8v-60.5c-6.2-.8-27.4-2.7-52.2-2.7-51.6 0-87 31.5-87 89.4v49.9h-58.4v67.6h58.4V480H24.7C11.1 480 0 468.9 0 455.3V56.7C0 43.1 11.1 32 24.7 32h398.5c13.7 0 24.8 11.1 24.8 24.7z"></path></svg><!-- <i _ngcontent-nid-c14="" class="fab fa-facebook"></i> --></a><a _ngcontent-nid-c14="" title="Kamil Mysliwiec Twitter" href="https://twitter.com/kammysliwiec" target="_blank"><svg _ngcontent-nid-c14="" class="svg-inline--fa fa-twitter fa-w-16" aria-hidden="true" data-prefix="fab" data-icon="twitter" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"></path></svg><!-- <i _ngcontent-nid-c14="" class="fab fa-twitter"></i> --></a><a _ngcontent-nid-c14="" title="Kamil Mysliwiec Github" href="https://github.com/kamilmysliwiec" target="_blank"><svg _ngcontent-nid-c14="" class="svg-inline--fa fa-github fa-w-16" aria-hidden="true" data-prefix="fab" data-icon="github" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" data-fa-i2svg=""><path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg><!-- <i _ngcontent-nid-c14="" class="fab fa-github"></i> --></a><a _ngcontent-nid-c14="" href="https://kamilmysliwiec.com/" title="Kamil Mysliwiec Blog | Full-Stack Software Engineer" target="_blank"><svg _ngcontent-nid-c14="" class="svg-inline--fa fa-globe fa-w-16" aria-hidden="true" data-prefix="fa" data-icon="globe" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M364.215 192h131.43c5.439 20.419 8.354 41.868 8.354 64s-2.915 43.581-8.354 64h-131.43c5.154-43.049 4.939-86.746 0-128zM185.214 352c10.678 53.68 33.173 112.514 70.125 151.992.221.001.44.008.661.008s.44-.008.661-.008c37.012-39.543 59.467-98.414 70.125-151.992H185.214zm174.13-192h125.385C452.802 84.024 384.128 27.305 300.95 12.075c30.238 43.12 48.821 96.332 58.394 147.925zm-27.35 32H180.006c-5.339 41.914-5.345 86.037 0 128h151.989c5.339-41.915 5.345-86.037-.001-128zM152.656 352H27.271c31.926 75.976 100.6 132.695 183.778 147.925-30.246-43.136-48.823-96.35-58.393-147.925zm206.688 0c-9.575 51.605-28.163 104.814-58.394 147.925 83.178-15.23 151.852-71.949 183.778-147.925H359.344zm-32.558-192c-10.678-53.68-33.174-112.514-70.125-151.992-.221 0-.44-.008-.661-.008s-.44.008-.661.008C218.327 47.551 195.872 106.422 185.214 160h141.572zM16.355 192C10.915 212.419 8 233.868 8 256s2.915 43.581 8.355 64h131.43c-4.939-41.254-5.154-84.951 0-128H16.355zm136.301-32c9.575-51.602 28.161-104.81 58.394-147.925C127.872 27.305 59.198 84.024 27.271 160h125.385z"></path></svg><!-- <i _ngcontent-nid-c14="" class="fa fa-globe"></i> --></a></div><div _ngcontent-nid-c14="" class="credits"><p _ngcontent-nid-c14=""> Copyright © 2017-2021 MIT by <a _ngcontent-nid-c14="" href="https://kamilmysliwiec.com/" target="_blank" title="Kamil Mysliwiec Blog | Full-Stack Software Engineer"> Kamil Mysliwiec</a><span _ngcontent-nid-c14="" class="separator"></span> design by <a _ngcontent-nid-c14="" href="https://dribbble.com/JakubStaron" title="Jakub Staron Dribble" target="_blank">Jakub Staron</a><br _ngcontent-nid-c14=""> Official NestJS Consulting <a _ngcontent-nid-c14="" href="https://trilon.io/" target="_blank" title="Official NestJS Consulting | Angular Consulting"> Trilon.io</a><span _ngcontent-nid-c14="" class="separator"></span> hosted by <a _ngcontent-nid-c14="" href="https://www.netlify.com/" target="_blank">Netlify</a></p></div></footer></app-footer></div></div></app-homepage><!----></app-root>
    <script>
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker
          .getRegistrations()
          .then(function(registrations) {
            registrations.forEach(registration => {
              registration
                .unregister()
                .then(function(register) {})
                .catch(function(error) {});
            });
          });
      }
    </script>
  <script src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/runtime-es2015.js" type="module"></script><script src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/runtime-es5.js" nomodule="" defer="defer"></script><script src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/polyfills-es5.js" nomodule="" defer="defer"></script><script src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/polyfills-es2015.js" type="module"></script><script src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/main-es2015.js" type="module"></script><script src="Database%20NestJS%20-%20A%20progressive%20Node.js%20framework_files/main-es5.js" nomodule="" defer="defer"></script>

<style type="text/css">@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:normal;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WR32kQ.woff) format('woff');}@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WRL2kXWdycuJDETf.woff) format('woff');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WRP2kXWdycuJDETf.woff) format('woff');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Inconsolata';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/inconsolata/v21/QldgNThLqRwH-OJ1UHjlKENVzkWGVkL3GZQmAwLYxYWI2qfdm7Lpp4U8WR32kXWdycuJDA.woff) format('woff');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>
</body></html>